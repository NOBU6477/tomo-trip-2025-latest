ノブさん、いま出ている主なエラーはこの3つです。

1. `defaultGuideData has already been declared`（二重宣言）
2. `setupEventListeners is not defined`（読み込み順 or ESMのexport/import不整合）
3. CSPで「inline script を実行拒否」→ インラインJSがブロック

下を**そのまま1回コピペ**でReplitのAgentに渡してください👇

---

【Replit Agent一括指示｜TomoTrip – 8/09 時点のコンソールエラー根治】

目的：

* 重複宣言（`defaultGuideData`）と未定義関数（`setupEventListeners`）を解消し、CSPでブロックされるインラインJSを廃止。
* プレビュー/別タブの表示を同一ビルドで統一。

作業手順（順番厳守）

1. `defaultGuideData` の二重宣言を**1か所に集約**

* リポジトリ全体を全文検索し、`defaultGuideData` を **let/const/var で宣言している全箇所**を洗い出す。
* 宣言は **1ファイル**に集約（例：`src/data/default-guides.js`）し、他は参照のみへ。

  ```js
  // src/data/default-guides.js
  export const defaultGuideData = [/* 既存配列を移動 */];
  ```

  参照側は全て：

  ```js
  import { defaultGuideData } from './data/default-guides.js'; // 相対パス調整
  ```
* `index.html` で **同じスクリプトを二重読み込み**していないか確認し、重複 `<script>` を削除。
* ESM一本化（`type="module"` のみ使用）。従来 `<script>` と混在している場合は廃止。

2. `setupEventListeners is not defined` の解消

* `app-init.js` で `setupEventListeners()` を呼び出しているが、**定義/エクスポートが未接続**。以下どちらかで統一：
  **A. ESMで明示import（推奨）**

  ```js
  // src/app-init.js
  import { setupEventListeners } from './main-events.js'; // ファイル名は実体に合わせる
  export function appInit() {
    setupEventListeners();
    // ...他の初期化
  }
  ```

  ```js
  // src/main-events.js
  export function setupEventListeners() { /* 既存処理を移動 or 定義 */ }
  ```

  **B. グローバル方式（暫定）**
  どうしてもESM化が難しい間は、定義側で `window.setupEventListeners = function(){...}` とし、呼び出しはそのまま。ただし**最終的にはAに移行**。

* **読み込み順**も確認：`setupEventListeners` を定義したモジュールが `app-init.js` より先に評価される（またはimportされる）こと。

3. CSP（Content Security Policy）でブロックされる**インラインスクリプトを撤去**

* `index.html` にある **インライン `<script>…</script>`**（Build ID表示や一時ログなど）を**外部ファイル**に切り出す。
  例：

  ```html
  <!-- NG: インライン -->
  <!-- <script>window.APP_BUILD_ID='v2025.08.09-UNIFIED-BUILD';</script> -->

  <!-- OK: 外部化 -->
  <script type="module" src="/env/build-id.js"></script>
  ```

  ```js
  // /env/build-id.js
  window.APP_BUILD_ID = 'v2025.08.09-UNIFIED-BUILD';
  console.info('[TomoTrip] BUILD', window.APP_BUILD_ID, location.href);
  ```
* もしインラインが必須ならCSP側に `nonce` か `sha256-...` を付けるが、**開発では原則インラインを廃止**してください。

4. 依存の読み込み統一（プレビュー/別タブの差異防止）

* `index.html` の先頭に `<base href="/">` を追加し、全参照を**ルート相対**(`/assets/...`, `/src/...`)に統一。
* ビルド資産は **1つの配信ディレクトリ**（例：`/public`）のみから出す。旧 `dist/build` は削除。
* 資産URLにはクエリバージョンを付与してキャッシュを避ける：

  ```html
  <script type="module" src="/src/app-init.js?v=2025.08.09-unified"></script>
  ```

5. 動作確認 & 後処理

* ブラウザの Application → Storage → **Clear site data** → ハードリロード（Ctrl/Cmd+Shift+R）。
* コンソールに以下が**出ない**ことを確認：

  * `defaultGuideData has already been declared`
  * `setupEventListeners is not defined`
  * CSPの inline script 拒否
* プレビュー(.replit.dev) とエディタープレビューの**両方で同じ BUILD ID** が表示。
* コミットメッセージ：
  `fix: dedupe defaultGuideData; wire setupEventListeners via ESM; remove inline scripts for CSP; unify asset base`

---

ワンポイント：

* 「再宣言」は**同名変数の多重定義**と**同じJSの二重読み込み**が原因の9割。
* 「未定義」は**ESMでexport/importが途切れている**か**読み込み順**の問題がほとんど。
* CSPは**インライン禁止**が基本。**外部化**が最短で安全です。

必要なら、該当ファイル名（`app-init.js`/`main.js`/`events.js` など）に合わせて import パスだけ調整してください。
