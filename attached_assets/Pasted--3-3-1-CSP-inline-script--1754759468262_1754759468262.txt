了解。いま出ている「直すべき」エラーは3つだけです。下の手順どおりに直してください。

---

# 修正指示書（今回の3件）

## 1) CSP が inline script をブロック

### 症状

```
Refused to execute inline script because it violates CSP: "script-src 'self' https://cdn.jsdelivr.net". 
Either 'unsafe-inline', a hash (sha256-...), or a nonce is required.
```

### 対処（推奨順）

**A. すべてのインライン JS を外部ファイル化（推奨）**

1. `index.html` などに残っている `<script> ...JSコード... </script>` を**空にしない**で、内容を `/js/***.mjs` に移す。
2. HTML 側は外部読み込みに変更（**type="module" を必ず付与**）：

   ```html
   <!-- 例: 置き換え後 -->
   <script type="module" src="/js/app-state.mjs"></script>
   <script type="module" src="/js/default-guides.mjs"></script>
   <script type="module" src="/js/location-setup.mjs"></script>
   <script type="module" src="/js/modal.mjs"></script>
   <script type="module" src="/js/event-handlers.mjs"></script>
   <script type="module" src="/js/app-init.mjs"></script>
   ```
3. キャッシュを無効化して再読込（DevTools Network→Disable cache にチェック）。

**B. どうしてもインラインを残す場合（非推奨）**

* `nonce` を使う：ヘッダ(or `<meta http-equiv>` では不可)で `Content-Security-Policy: script-src 'self' https://cdn.jsdelivr.net 'nonce-XYZ';` を送出し、対象 `<script nonce="XYZ"> ... </script>` と一致させる。Replit の静的配信では面倒なので**A を推奨**。

> **注意**：`https://cdn.jsdelivr.net` を `script-src` に入れても「インライン実行」は許可されません。`'unsafe-inline'` を追加するのはセキュリティ的に非推奨です。

---

## 2) `Identifier 'switchToJapanese' has already been declared`

### 原因

同名の関数/変数を**重複定義**、または同じファイルを HTML で**二重読み込み**。

### 直し方

1. `index.html` で `event-handlers.mjs` 等が**重複で読み込まれていないか確認**し、片方を削除。
2. ファイル側も**一度だけ公開**に変える：

   ```js
   // event-handlers.mjs
   export function switchToJapaneseHandler() { /* ... */ }

   // グローバル化が必要なら（1回だけ）
   if (!('switchToJapanese' in window)) {
     window.switchToJapanese = switchToJapaneseHandler;
   }
   ```
3. 別所に同名宣言があれば**関数名をリネーム**して衝突回避（例：`switchToJapaneseMenu`）。

---

## 3) `Cannot read properties of undefined (reading 'backdrop')` in `modal.js:158`

### 原因

`#sponsorLoginModal` などのモーダル要素が**まだ存在しない**タイミングで `.querySelector('.backdrop')` を読んでいる。

### 直し方

* **存在チェック**と**必要なら生成**を入れる。さらに **DOMContentLoaded 後**に初期化。

```js
// modal.mjs
export function showSponsorLoginModal() {
  const modal = document.getElementById('sponsorLoginModal');
  if (!modal) {
    console.warn('[modal] sponsorLoginModal not found');
    return; // ここで安全に中断、または createModal() で生成
  }
  let backdrop = modal.querySelector('.backdrop');
  if (!backdrop) {
    backdrop = document.createElement('div');
    backdrop.className = 'backdrop';
    modal.appendChild(backdrop);
  }
  // 以降、開く処理…
}

// event-handlers.mjs（バインドは DOM 構築後に）
import { showSponsorLoginModal } from './modal.mjs';

document.addEventListener('DOMContentLoaded', () => {
  document.getElementById('sponsorLoginBtn')
    ?.addEventListener('click', showSponsorLoginModal);
});
```

---

## 仕上げチェック（順番）

1. **インラインJS撤去** → 外部 `.mjs`化 & `type="module"`。
2. `event-handlers.mjs` の重複宣言・二重読み込みを排除（`switchToJapanese` を 1回だけに）。
3. `modal.js` に null ガードを追加、初期化は `DOMContentLoaded` 後。
4. 画面をハードリロード（キャッシュ無効）→ **赤エラーが 0 件**であることを確認。
   ※黄の “Unrecognized feature … / WebGL … / sandbox …” は Replit/ブラウザ由来で**無視可**。

必要なら、現在の `index.html` の `<script>` 部分や `event-handlers.mjs` / `modal.mjs` の該当行を貼ってください。あなたの構成に合わせて**完成コード**まで書き換えて返します。
