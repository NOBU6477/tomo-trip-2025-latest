// English Guide Card Converter - Convert all Japanese guide cards to English
console.log('üåè English Guide Card Converter Loading...');

document.addEventListener('DOMContentLoaded', function() {
  console.log('üåè Starting English guide card conversion...');
  
  // Japanese to English translations mapping
  const translations = {
    // Names
    'Â±±Áî∞ Ê¨°ÈÉé': 'Jiro Yamada',
    'Áî∞‰∏≠ Â§™ÈÉé': 'Taro Tanaka',
    '‰ΩêËó§ Ëä±Â≠ê': 'Hanako Sato',
    'Èà¥Êú® ‰∏ÄÈÉé': 'Ichiro Suzuki',
    'È´òÊ©ã ÁæéÂí≤': 'Misaki Takahashi',
    '‰ºäËó§ ÂÅ•Â§™': 'Kenta Ito',
    'Ê∏°Ëæ∫ Áî±Áæé': 'Yumi Watanabe',
    '‰∏≠Êùë Â§ßËºî': 'Daisuke Nakamura',
    
    // Locations
    '‰∫¨ÈÉΩÂ∫ú ‰∫¨ÈÉΩÂ∏Ç': 'Kyoto, Kyoto',
    'Êù±‰∫¨ÈÉΩ Ê∏ãË∞∑Âå∫': 'Tokyo, Shibuya',
    'Â§ßÈò™Â∫ú Â§ßÈò™Â∏Ç': 'Osaka, Osaka',
    'ÂåóÊµ∑ÈÅì Êú≠ÂπåÂ∏Ç': 'Hokkaido, Sapporo',
    'ÊÑõÁü•Áúå ÂêçÂè§Â±ãÂ∏Ç': 'Aichi, Nagoya',
    'Á¶èÂ≤°Áúå Á¶èÂ≤°Â∏Ç': 'Fukuoka, Fukuoka',
    'Â∫ÉÂ≥∂Áúå Â∫ÉÂ≥∂Â∏Ç': 'Hiroshima, Hiroshima',
    'ÂÆÆÂüéÁúå ‰ªôÂè∞Â∏Ç': 'Miyagi, Sendai',
    'Áü≥Â∑ùÁúå ÈáëÊ≤¢Â∏Ç': 'Ishikawa, Kanazawa',
    'Â•àËâØÁúå Â•àËâØÂ∏Ç': 'Nara, Nara',
    'Ê≤ñÁ∏ÑÁúå ÈÇ£Ë¶áÂ∏Ç': 'Okinawa, Naha',
    'Á•ûÂ•àÂ∑ùÁúå Ê®™ÊµúÂ∏Ç': 'Kanagawa, Yokohama',
    
    // Languages
    'Êó•Êú¨Ë™û': 'Japanese',
    'Ëã±Ë™û': 'English',
    '‰∏≠ÂõΩË™û': 'Chinese',
    'ÈüìÂõΩË™û': 'Korean',
    '„Éï„É©„É≥„ÇπË™û': 'French',
    '„Çπ„Éö„Ç§„É≥Ë™û': 'Spanish',
    
    // Price and buttons
    '¬•6,000/Âõû': '¬•6,000/session',
    '¬•7,000/Âõû': '¬•7,000/session',
    '¬•8,000/Âõû': '¬•8,000/session',
    '¬•9,000/Âõû': '¬•9,000/session',
    '¬•10,000/Âõû': '¬•10,000/session',
    'Ë©≥Á¥∞„ÇíË¶ã„Çã': 'View Details',
    '‰∫àÁ¥Ñ„Åô„Çã': 'Book Now',
    '„ÅäÊ∞ó„Å´ÂÖ•„Çä': 'Favorite',
    
    // Descriptions (common phrases)
    '‰∫¨ÈÉΩ„ÅÆ‰ºùÁµ±ÊñáÂåñ„Å®ÂØ∫Èô¢Â∑°„Çä„ÅÆÂ∞ÇÈñÄ„Ç¨„Ç§„Éâ„ÄÇÂ≠£ÁØÄ„ÅÆÁæé„Åó„Åï„ÇíÊÑü„Åò„ÇãÁâπÂà•„Å™Â†¥ÊâÄ„Å∏„ÅîÊ°àÂÜÖ„ÄÇ': 'Specialist guide for Kyoto\'s traditional culture and temple tours. I\'ll take you to special places where you can feel the beauty of the seasons.',
    'Êù±‰∫¨Áîü„Åæ„ÇåÊù±‰∫¨ËÇ≤„Å°„ÅÆÂú∞ÂÖÉ„Ç¨„Ç§„Éâ„ÄÇÈö†„Çå„ÅüÂêçÂ∫ó„ÇÑÊñáÂåñ„Çπ„Éù„ÉÉ„Éà„Çí„ÅîÊ°àÂÜÖ„Åó„Åæ„Åô„ÄÇ': 'Born and raised in Tokyo local guide. I will guide you to hidden famous shops and cultural spots.',
    'Â§ßÈò™„ÅÆÈ£üÊñáÂåñ„Å®Ê≠¥Âè≤„Å´Ë©≥„Åó„ÅÑ„Ç¨„Ç§„Éâ„ÄÇÊú¨Â†¥„ÅÆ„Åü„ÅìÁÑº„Åç„Å®„ÅäÂ•Ω„ÅøÁÑº„Åç‰ΩìÈ®ì„Çí„ÅîÊ°àÂÜÖ„ÄÇ': 'Guide knowledgeable about Osaka\'s food culture and history. I guide you through authentic takoyaki and okonomiyaki experiences.',
    'ÂåóÊµ∑ÈÅì„ÅÆÈõÑÂ§ß„Å™Ëá™ÁÑ∂„Å®Êñ∞ÈÆÆ„Å™Êµ∑„ÅÆÂπ∏„ÇíÊé¢Ê§ú„ÄÇÊÅØ„Çí„ÅÆ„ÇÄ„Çà„ÅÜ„Å™Â≠£ÁØÄ„ÅÆ„Çπ„Éù„ÉÉ„Éà„Å∏„ÅîÊ°àÂÜÖ„ÄÇ': 'Explore Hokkaido\'s pristine nature and fresh seafood. I\'ll guide you to breathtaking seasonal spots.',
    'ÂêçÂè§Â±ã„ÅÆÁî£Ê•≠ÊñáÂåñ„Å®Âë≥Âôå„Ç´„ÉÑ„Å™„Å©„ÅÆÂú∞ÂÖÉÂêçÁâ©„ÇíÁü•Ë≠òË±äÂØå„Å™Âú∞ÂÖÉ„Ç¨„Ç§„Éâ„Åå„ÅîÊ°àÂÜÖ„ÄÇ': 'Discover Nagoya\'s industrial culture and local specialties like miso katsu with a knowledgeable local guide.'
  };
  
  function convertGuideCards() {
    const guideCards = document.querySelectorAll('.guide-card');
    let convertedCount = 0;
    
    guideCards.forEach(card => {
      let wasConverted = false;
      
      // Convert name
      const nameElement = card.querySelector('.card-title');
      if (nameElement && translations[nameElement.textContent.trim()]) {
        nameElement.textContent = translations[nameElement.textContent.trim()];
        wasConverted = true;
      }
      
      // Convert location
      const locationElement = card.querySelector('.text-muted');
      if (locationElement) {
        let locationText = locationElement.textContent.replace(/\s*[\s\S]*?geo-alt[\s\S]*?\s*/, '').trim();
        if (translations[locationText]) {
          locationElement.innerHTML = `<i class="bi bi-geo-alt"></i> ${translations[locationText]}`;
          wasConverted = true;
        }
      }
      
      // Convert description
      const descElement = card.querySelector('.card-text');
      if (descElement && translations[descElement.textContent.trim()]) {
        descElement.textContent = translations[descElement.textContent.trim()];
        wasConverted = true;
      }
      
      // Convert language badges
      const badges = card.querySelectorAll('.badge.bg-light');
      badges.forEach(badge => {
        if (translations[badge.textContent.trim()]) {
          badge.textContent = translations[badge.textContent.trim()];
          wasConverted = true;
        }
      });
      
      // Convert price
      const priceElement = card.querySelector('.fw-bold');
      if (priceElement && translations[priceElement.textContent.trim()]) {
        priceElement.textContent = translations[priceElement.textContent.trim()];
        wasConverted = true;
      }
      
      // Convert button
      const buttonElement = card.querySelector('.btn');
      if (buttonElement && translations[buttonElement.textContent.trim()]) {
        buttonElement.textContent = translations[buttonElement.textContent.trim()];
        wasConverted = true;
      }
      
      if (wasConverted) {
        convertedCount++;
        card.classList.add('english-converted');
      }
    });
    
    console.log(`‚úÖ Converted ${convertedCount} guide cards to English`);
    return convertedCount;
  }
  
  // Convert existing cards immediately
  setTimeout(() => {
    const converted = convertGuideCards();
    if (converted > 0) {
      console.log(`üåè English conversion complete: ${converted} cards converted`);
    }
  }, 100);
  
  // Monitor for new cards added dynamically
  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(mutation => {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === 1 && (node.classList.contains('guide-card') || node.querySelector('.guide-card'))) {
            setTimeout(() => {
              convertGuideCards();
            }, 50);
          }
        });
      }
    });
  });
  
  const container = document.getElementById('guide-cards-container');
  if (container) {
    observer.observe(container, {
      childList: true,
      subtree: true
    });
    console.log('üåè Dynamic conversion monitor active');
  }
  
  // Expose function globally for manual conversion
  window.convertGuideCardsToEnglish = convertGuideCards;
});

console.log('üåè English Guide Card Converter Loaded');