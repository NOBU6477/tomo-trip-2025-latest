<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Local Guide - 現地ガイドマッチングサービス</title>
  
  <meta name="firebase-api-key" content="mock-api-key">
  <meta name="firebase-project-id" content="mock-project-id">
  <meta name="firebase-app-id" content="mock-app-id">
  
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="styles.css">
  <link rel="stylesheet" href="nav_style_fix.css">
  <link rel="stylesheet" href="override_styles.css">
  <link rel="stylesheet" href="fix_modal_darkness.css">
  
  <style>
  /* モーダル表示時の背景を暗く */
  body.modal-open .modal {
    background-color: rgba(0, 0, 0, 0.25) !important;
  }
  /* モーダルのZ-indexを調整 */
  .modal-backdrop {
    z-index: 1040 !important;
  }
  .modal-dialog {
    z-index: 1050 !important;
    margin: 1.75rem auto !important;
  }
  /* モーダルのコンテンツスタイル */
  .modal-content {
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.5) !important;
  }
  </style>
  
  <script>
  // モーダルフィクサー
  function fixModalDisplayIssues() {
    // モーダルが表示された時の処理
    document.addEventListener("shown.bs.modal", function(e) {
      // 背景をすべて削除
      document.querySelectorAll(".modal-backdrop").forEach(function(el, index) {
        if (index > 0) {
          el.remove();
        }
      });
      
      // bodyにスタイルを追加
      document.body.classList.add("modal-open");
      document.body.style.overflow = "hidden";
      
      // モーダルの背景色を設定
      e.target.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
    });
    
    // モーダルが閉じられた時の処理
    document.addEventListener("hidden.bs.modal", function(e) {
      // 他にモーダルが表示されていなければbodyのスタイルをリセット
      const visibleModals = document.querySelectorAll(".modal.show");
      if (visibleModals.length === 0) {
        document.body.classList.remove("modal-open");
        document.body.style.overflow = "";
        document.body.style.paddingRight = "";
      }
    });
  }
  // ページ読み込み時に実行
  document.addEventListener("DOMContentLoaded", fixModalDisplayIssues);
  </script>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
  
  <script>
  window.addEventListener("load", function() {
    console.log("ウィンドウ読み込み完了");
    // 観光客アップロードボタンを確認
    const touristBtn = document.getElementById("tourist-upload-id");
    if (touristBtn) {
      console.log("ウィンドウ読み込み後: 観光客ボタンを見つけました");
      touristBtn.addEventListener("click", function(e) {
        e.preventDefault();
        console.log("ウィンドウ読み込み後: 観光客ボタンがクリックされました");
        const idModal = document.getElementById("idDocumentModal");
        if (idModal) {
          // ユーザータイプの設定
          let typeField = idModal.querySelector("input[name=user-type]");
          if (!typeField) {
            typeField = document.createElement("input");
            typeField.type = "hidden";
            typeField.name = "user-type";
            const form = idModal.querySelector("form");
            if (form) form.appendChild(typeField);
          }
          typeField.value = "tourist";
          
          const touristModal = bootstrap.Modal.getInstance(document.getElementById("touristRegisterModal"));
          if (touristModal) touristModal.hide();
          
          setTimeout(function() {
            const modal = new bootstrap.Modal(idModal);
            modal.show();
          }, 300);
        }
        return false;
      });
    }
  });
  </script>
  
  <script>
  // 観光客本人確認ボタン用ヘルパー関数
  document.addEventListener("DOMContentLoaded", function() {
    const touristUploadBtn = document.getElementById("tourist-upload-id");
    if (touristUploadBtn) {
      // すでに設定されているイベントを全て削除
      const newBtn = touristUploadBtn.cloneNode(true);
      if (touristUploadBtn.parentNode) {
        touristUploadBtn.parentNode.replaceChild(newBtn, touristUploadBtn);
      }
      
      // 新しい直接HTML方式のボタンイベント
      newBtn.addEventListener("click", function(e) {
        e.preventDefault();
        
        // 観光客登録モーダルを閉じる
        const touristModal = document.getElementById("touristRegisterModal");
        if (touristModal) {
          touristModal.classList.remove("show");
          touristModal.style.display = "none";
          touristModal.setAttribute("aria-hidden", "true");
          touristModal.removeAttribute("aria-modal");
        }
        
        // バックドロップを削除
        document.querySelectorAll(".modal-backdrop").forEach(function(el) {
          el.parentNode.removeChild(el);
        });
        
        // bodyスタイルをリセット
        document.body.classList.remove("modal-open");
        
        // 少し待ってから本人確認モーダルを表示
        setTimeout(function() {
          const idModal = document.getElementById("idDocumentModal");
          if (idModal) {
            // ユーザータイプを設定
            let typeField = idModal.querySelector("input[name=\"user-type\"]");
            if (!typeField) {
              typeField = document.createElement("input");
              typeField.type = "hidden";
              typeField.name = "user-type";
              idModal.querySelector("form").appendChild(typeField);
            }
            typeField.value = "tourist";
            
            // モーダルを直接表示
            const backdrop = document.createElement("div");
            backdrop.className = "modal-backdrop fade show"; backdrop.style.opacity = "0.25";
            document.body.appendChild(backdrop);
            
            idModal.classList.add("show");
            idModal.style.display = "block";
            idModal.setAttribute("aria-modal", "true");
            idModal.removeAttribute("aria-hidden");
            
            document.body.classList.add("modal-open");
          } else {
            alert("身分証明書モーダルが見つかりません");
          }
        }, 300);
        
        return false;
      });
      
      console.log("観光客ボタンを最もシンプルな方法で設定しました");
    }
  });
  </script>
  
  <script>
  // 最もシンプルなインラインスクリプト
  (function() {
    // ページ読み込み完了時に実行
    window.addEventListener("load", function() {
      // URLに特定のパラメータがある場合、モーダルを直接表示
      const params = new URLSearchParams(window.location.search);
      const showModal = params.get("showIdModal");
      const userType = params.get("userType");
      
      if (showModal === "true") {
        // URLからパラメータを削除（履歴に残さない）
        history.replaceState({}, document.title, "/");
        
        // 少し待ってからモーダルを表示
        setTimeout(function() {
          const modal = document.getElementById("idDocumentModal");
          if (modal) {
            // ユーザータイプを設定
            let typeField = modal.querySelector("input[name=\"user-type\"]");
            if (!typeField) {
              typeField = document.createElement("input");
              typeField.type = "hidden";
              typeField.name = "user-type";
              typeField.value = userType || "tourist";
              modal.querySelector("form").appendChild(typeField);
            } else {
              typeField.value = userType || "tourist";
            }
            
            // すべてのモーダルとバックドロップをリセット
            document.querySelectorAll(".modal").forEach(function(m) {
              m.classList.remove("show");
              m.style.display = "none";
            });
            
            document.querySelectorAll(".modal-backdrop").forEach(function(b) {
              b.remove();
            });
            
            // 新しいバックドロップを追加
            const backdrop = document.createElement("div");
            backdrop.className = "modal-backdrop fade show"; backdrop.style.opacity = "0.25";
            document.body.appendChild(backdrop);
            
            // モーダルを表示
            modal.classList.add("show");
            modal.style.display = "block";
            modal.setAttribute("aria-modal", "true");
            modal.removeAttribute("aria-hidden");
            
            document.body.classList.add("modal-open");
            
            // イベントを発火
            const event = new Event("shown.bs.modal");
            modal.dispatchEvent(event);
          }
        }, 300);
      }
    });
  })();
  </script>
  
  <script>
  // 最もシンプルな方法でモーダルを表示する
  document.addEventListener("DOMContentLoaded", function() {
    // 観光客ボタンを取得
    const btn = document.getElementById("tourist-upload-id");
    if (btn) {
      // ボタンのイベントを全て削除して新たなボタンに置き換え
      const newBtn = btn.cloneNode(true);
      if (btn.parentNode) {
        btn.parentNode.replaceChild(newBtn, btn);
      }
      
      // 新しいイベントリスナーを追加
      newBtn.addEventListener("click", function(e) {
        e.preventDefault();
        console.log("観光客ボタンクリック - 最終修正版");
        
        // 1. まず既存のモーダルを閉じる
        const registerModal = document.getElementById("touristRegisterModal");
        if (registerModal) {
          // モーダルを非表示に
          registerModal.classList.remove("show");
          registerModal.style.display = "none";
          registerModal.setAttribute("aria-hidden", "true");
          registerModal.removeAttribute("aria-modal");
        }
        
        // 2. バックドロップをクリア
        document.querySelectorAll(".modal-backdrop").forEach(function(backdrop) {
          backdrop.parentNode.removeChild(backdrop);
        });
        
        // 3. bodyのスタイルをリセット
        document.body.classList.remove("modal-open");
        document.body.style.overflow = "";
        document.body.style.paddingRight = "";
        
        // 4. 少し待ってから新しいモーダルを表示
        setTimeout(function() {
          // 新しいバックドロップを作成
          const backdrop = document.createElement("div");
          backdrop.className = "modal-backdrop fade show"; backdrop.style.opacity = "0.25";
          backdrop.style.opacity = "0.25";
          backdrop.style.zIndex = "1040";
          document.body.appendChild(backdrop);
          
          // モーダルを表示
          const modal = document.getElementById("idDocumentModal");
          if (modal) {
            // ユーザータイプを設定
            let typeField = modal.querySelector("input[name=\"user-type\"]");
            if (!typeField) {
              typeField = document.createElement("input");
              typeField.type = "hidden";
              typeField.name = "user-type";
              typeField.value = "tourist";
              modal.querySelector("form").appendChild(typeField);
            } else {
              typeField.value = "tourist";
            }
            
            // モーダルスタイルを設定
            modal.classList.add("show");
            modal.style.display = "block";
            modal.style.backgroundColor = "rgba(0, 0, 0, 0.25)";
            modal.setAttribute("aria-modal", "true");
            modal.removeAttribute("aria-hidden");
            
            // bodyスタイルを設定
            document.body.classList.add("modal-open");
            
            // イベントを発火
            const event = new CustomEvent("shown.bs.modal");
            modal.dispatchEvent(event);
            
            console.log("身分証明書モーダルを表示しました - 最終修正版");
          }
        }, 300);
        
        return false;
      });
    }
  });
  </script>
  
  <script>
  // インラインの修正スクリプト（確実に実行されるように）
  window.addEventListener("load", function() {
    // 観光客ボタン
    const touristBtn = document.getElementById("tourist-upload-id");
    if (touristBtn) {
      // 既存のイベントをクリア
      const newBtn = touristBtn.cloneNode(true);
      touristBtn.parentNode.replaceChild(newBtn, touristBtn);
      
      // 新しいイベントを設定
      newBtn.addEventListener("click", function(e) {
        e.preventDefault();
        console.log("観光客ボタンクリック（インライン修正）");
        
        // ここで独自実装のモーダル表示
        try {
          // 現在のモーダルを閉じる
          const currentModal = document.getElementById("touristRegisterModal");
          if (currentModal) {
            currentModal.classList.remove("show");
            currentModal.style.display = "none";
          }
          
          // バックドロップをクリア
          document.querySelectorAll(".modal-backdrop").forEach(function(el) {
            if (el.parentNode) el.parentNode.removeChild(el);
          });
          
          // bodyをリセット
          document.body.classList.remove("modal-open");
          document.body.style.overflow = "";
          document.body.style.paddingRight = "";
          
          // 少し待ってから処理
          setTimeout(function() {
            // 新しいバックドロップ
            const backdrop = document.createElement("div");
            backdrop.className = "modal-backdrop fade show";
            backdrop.style.opacity = "0.25";
            document.body.appendChild(backdrop);
            
            // モーダルを表示
            const idModal = document.getElementById("idDocumentModal");
            if (idModal) {
              // フォームにユーザータイプを設定
              const form = idModal.querySelector("form");
              let typeField = form.querySelector("input[name=\"user-type\"]");
              if (!typeField) {
                typeField = document.createElement("input");
                typeField.type = "hidden";
                typeField.name = "user-type";
                form.appendChild(typeField);
              }
              typeField.value = "tourist";
              
              // モーダル表示
              idModal.classList.add("show");
              idModal.style.display = "block";
              idModal.setAttribute("aria-modal", "true");
              idModal.removeAttribute("aria-hidden");
              
              // イベント発火
              const event = new Event("shown.bs.modal");
              idModal.dispatchEvent(event);
              
              document.body.classList.add("modal-open");
            }
          }, 300);
        } catch (err) {
          console.error("モーダル表示中のエラー:", err);
        }
        
        return false;
      });
    }
  });
  </script>
  <script>
  // 最もシンプルな修正スクリプト
  (function() {
    // ウィンドウロード時に実行
    window.addEventListener("load", function() {
      console.log("ウィンドウロード時のシンプルな修正を実行");
      
      // 新規登録ボタン
      const registerButton = document.querySelector(".btn.btn-warning");
      if (registerButton) {
        console.log("新規登録ボタンを発見 (シンプル実装)");
        
        // イベントを修正
        registerButton.onclick = function(e) {
          e.preventDefault();
          console.log("新規登録ボタンがクリックされました (シンプル実装)");
          
          // 既存のモーダルをクリア
          document.querySelectorAll(".modal.show").forEach(function(modal) {
            modal.classList.remove("show");
            modal.style.display = "none";
          });
          
          document.querySelectorAll(".modal-backdrop").forEach(function(backdrop) {
            backdrop.parentNode.removeChild(backdrop);
          });
          
          // ユーザータイプモーダルを表示
          const userTypeModal = document.getElementById("userTypeModal");
          
          if (userTypeModal) {
            // バックドロップを追加
            const backdrop = document.createElement("div");
            backdrop.className = "modal-backdrop fade show";
            backdrop.style.opacity = "0.25";
            document.body.appendChild(backdrop);
            
            // モーダルを表示
            userTypeModal.classList.add("show");
            userTypeModal.style.display = "block";
            userTypeModal.setAttribute("aria-modal", "true");
            userTypeModal.removeAttribute("aria-hidden");
            
            document.body.classList.add("modal-open");
          }
          
          return false;
        };
      }
    });
  })();
  </script>
  <!-- 最もシンプルなインライン修正スクリプト -->
  <script>
  // 最もシンプルなインライン修正
  (function() {
    function findOrCreateRegisterButton() {
      // まず既存のボタンを探す
      let registerBtn = document.querySelector(".btn.btn-warning, a.btn-warning");
      
      // ボタンが見つからない場合は作成
      if (!registerBtn) {
        console.log("新規登録ボタンが見つからないため作成します");
        const navbar = document.querySelector(".navbar-nav");
        
        if (navbar) {
          // 新しいボタンを作成
          registerBtn = document.createElement("a");
          registerBtn.href = "#";
          registerBtn.className = "btn btn-warning btn-sm ms-2";
          registerBtn.textContent = "新規登録";
          
          // ナビバーに追加
          navbar.appendChild(registerBtn);
        }
      }
      
      // ボタンが見つかった/作成された場合、イベントを設定
      if (registerBtn) {
        console.log("登録ボタンを設定します");
        
        // 既存のイベントをクリア
        const newBtn = registerBtn.cloneNode(true);
        if (registerBtn.parentNode) {
          registerBtn.parentNode.replaceChild(newBtn, registerBtn);
        }
        
        // 新しいイベントを設定
        newBtn.onclick = function(e) {
          e.preventDefault();
          console.log("新規登録ボタンがクリックされました");
          
          // モーダル表示
          const userTypeModal = document.getElementById("userTypeModal");
          if (userTypeModal) {
            // 他のモーダルを閉じる
            document.querySelectorAll(".modal.show").forEach(function(modal) {
              modal.classList.remove("show");
              modal.style.display = "none";
            });
            
            // バックドロップをクリア
            document.querySelectorAll(".modal-backdrop").forEach(function(el) {
              if (el.parentNode) el.parentNode.removeChild(el);
            });
            
            // 新しいバックドロップを作成
            const backdrop = document.createElement("div");
            backdrop.className = "modal-backdrop fade show";
            backdrop.style.opacity = "0.25";
            document.body.appendChild(backdrop);
            
            // モーダルを表示
            userTypeModal.classList.add("show");
            userTypeModal.style.display = "block";
            userTypeModal.setAttribute("aria-modal", "true");
            userTypeModal.removeAttribute("aria-hidden");
            
            document.body.classList.add("modal-open");
          }
          
          return false;
        };
      }
    }
    
    // DOMContentLoadedとwindow.loadの両方で実行
    document.addEventListener("DOMContentLoaded", findOrCreateRegisterButton);
    window.addEventListener("load", findOrCreateRegisterButton);
  })();
  </script>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
      <a class="navbar-brand" href="#">
        <i data-feather="map"></i> Local Guide
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto">
          <li class="nav-item">
            <a class="nav-link active" href="#" data-i18n="nav.home">ホーム</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#guides" data-i18n="nav.find_guides">ガイドを探す</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#how-it-works" data-i18n="nav.how_it_works">使い方</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#about" data-i18n="nav.about">サービスについて</a>
          </li>
        </ul>
        
        
        <div class="nav-item dropdown me-3">
          <button class="btn btn-outline-light dropdown-toggle" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <i data-feather="globe"></i> <span id="current-language">日本語</span>
          </button>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="languageDropdown">
            <li><a class="dropdown-item language-option" href="#" data-lang="ja">日本語</a></li>
            <li><a class="dropdown-item language-option" href="#" data-lang="en">English</a></li>
            <li><a class="dropdown-item language-option" href="#" data-lang="zh">中文</a></li>
            <li><a class="dropdown-item language-option" href="#" data-lang="ko">한국어</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item language-option" href="#" data-lang="fr">Français</a></li>
            <li><a class="dropdown-item language-option" href="#" data-lang="es">Español</a></li>
            <li><a class="dropdown-item language-option" href="#" data-lang="de">Deutsch</a></li>
            <li><a class="dropdown-item language-option" href="#" data-lang="it">Italiano</a></li>
          </ul>
        </div>
        
        <div id="not-logged-in" class="d-flex">
          <button id="login-btn" class="btn btn-outline-light me-2" data-i18n="nav.login">ログイン</button>
          <button id="register-btn" class="btn btn-light" data-i18n="nav.register">新規登録</button>
        </div>
        
        
        <div id="logged-in" class="d-none">
          <div class="dropdown">
            <button class="btn btn-outline-light dropdown-toggle" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <i data-feather="user"></i> <span id="user-name">ユーザー名</span>
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
              <li><a class="dropdown-item" href="#" id="profile-link" data-i18n="nav.my_profile">マイプロフィール</a></li>
              <li><a class="dropdown-item" href="#" id="bookings-link" data-i18n="nav.my_bookings">予約管理</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item" href="#" id="logout-btn" data-i18n="nav.logout">ログアウト</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </nav>
    </div>
  </nav>
  </nav>
  <div class="container my-4">
    
    <section id="hero" class="row align-items-center py-5">
      <div class="col-md-6">
        <h1 data-i18n="hero.title">現地の案内人と巡る、特別な旅</h1>
        <p class="lead" data-i18n="hero.subtitle">地元の人だけが知る隠れた名所や文化体験。現地ガイドとともに、忘れられない旅の思い出を作りましょう。</p>
          
          <div class="mt-4">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-i18n="common.cancel">キャンセル</button>
            <button type="submit" class="btn btn-primary" id="document-upload-btn" data-i18n="verification.upload">書類をアップロード</button>
          </div>
      </div>
      <div class="col-md-6">
        <img src="https://images.unsplash.com/photo-1528164344705-47542687000d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1369&q=80" alt="ローカルガイド" class="img-fluid rounded shadow">
      </div>
    </section>
    
    <section id="guides" class="my-5">
      <h2 class="text-center mb-4" data-i18n="search.title">どの地域を訪れますか？</h2>
      <div class="row justify-content-center">
        <div class="col-md-8">
          <div class="input-group mb-4">
            <input type="text" class="form-control" placeholder="地域名を入力（例：東京、京都、石垣島）" id="search-input" data-i18n-placeholder="search.placeholder">
            <button class="btn btn-primary" type="button" id="search-button" data-i18n="search.button">検索</button>
          </div>
          <div class="text-center mb-4">
            <div class="nav nav-tabs justify-content-center" id="region-tabs" role="tablist">
              <button class="nav-link active" id="popular-tab" data-bs-toggle="tab" data-bs-target="#popular" role="tab" aria-controls="popular" aria-selected="true" data-i18n="search.tab.popular">人気</button>
              <button class="nav-link" id="hokkaido-tab" data-bs-toggle="tab" data-bs-target="#hokkaido" role="tab" aria-controls="hokkaido" aria-selected="false" data-i18n="search.tab.hokkaido">北海道・東北</button>
              <button class="nav-link" id="kanto-tab" data-bs-toggle="tab" data-bs-target="#kanto" role="tab" aria-controls="kanto" aria-selected="false" data-i18n="search.tab.kanto">関東</button>
              <button class="nav-link" id="chubu-tab" data-bs-toggle="tab" data-bs-target="#chubu" role="tab" aria-controls="chubu" aria-selected="false" data-i18n="search.tab.chubu">中部</button>
              <button class="nav-link" id="kinki-tab" data-bs-toggle="tab" data-bs-target="#kinki" role="tab" aria-controls="kinki" aria-selected="false" data-i18n="search.tab.kinki">近畿</button>
              <button class="nav-link" id="chugoku-tab" data-bs-toggle="tab" data-bs-target="#chugoku" role="tab" aria-controls="chugoku" aria-selected="false" data-i18n="search.tab.chugoku">中国・四国</button>
              <button class="nav-link" id="kyushu-tab" data-bs-toggle="tab" data-bs-target="#kyushu" role="tab" aria-controls="kyushu" aria-selected="false" data-i18n="search.tab.kyushu">九州</button>
              <button class="nav-link" id="okinawa-tab" data-bs-toggle="tab" data-bs-target="#okinawa" role="tab" aria-controls="okinawa" aria-selected="false" data-i18n="search.tab.okinawa">沖縄・離島</button>
            </div>
            
            <div class="tab-content p-3" id="region-tabs-content">
              <div class="tab-pane fade show active" id="popular" role="tabpanel" aria-labelledby="popular-tab">
                <div class="d-flex flex-wrap justify-content-center">
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="東京">東京</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="京都">京都</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="大阪">大阪</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="札幌">札幌</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="那覇">那覇</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="福岡">福岡</button>
                </div>
              </div>
              <div class="tab-pane fade" id="hokkaido" role="tabpanel" aria-labelledby="hokkaido-tab">
                <div class="d-flex flex-wrap justify-content-center">
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="札幌">札幌</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="函館">函館</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="旭川">旭川</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="釧路">釧路</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="仙台">仙台</button>
                  <button class="btn btn-sm btn-outline-secondary city-btn" data-city="青森">青森</button>
                </div>
              </div>
              
            </div>
          </div>
        </div>
      </div>
      
      <div id="search-results" class="mt-4"></div>
    </section>
    
    <section class="my-5 py-4 bg-light rounded">
      <div class="container">
        <h2 class="text-center mb-4" data-i18n="features.title">Local Guideの特徴</h2>
        <div class="row">
          <div class="col-md-4 mb-4">
            <div class="feature-icon">
              <i data-feather="users" class="text-primary" style="width: 40px; height: 40px;"></i>
            </div>
            <h3 class="h5 text-center" data-i18n="features.connect.title">地元の人と繋がる</h3>
            <p class="text-center" data-i18n="features.connect.desc">ガイドブックには載っていない地元の人だけが知る特別な場所や体験を発見できます。</p>
          </div>
          <div class="col-md-4 mb-4">
            <div class="feature-icon">
              <i data-feather="shield" class="text-primary" style="width: 40px; height: 40px;"></i>
            </div>
            <h3 class="h5 text-center" data-i18n="features.safety.title">安心・安全</h3>
            <p class="text-center" data-i18n="features.safety.desc">すべてのガイドは厳正な審査を経ており、レビュー評価システムで質の高いサービスを保証します。</p>
          </div>
          <div class="col-md-4 mb-4">
            <div class="feature-icon">
              <i data-feather="star" class="text-primary" style="width: 40px; height: 40px;"></i>
            </div>
            <h3 class="h5 text-center" data-i18n="features.personalized.title">パーソナライズされた体験</h3>
            <p class="text-center" data-i18n="features.personalized.desc">あなたの興味や好みに合わせたカスタマイズツアーで、一生の思い出に残る体験を。</p>
          </div>
        </div>
      </div>
    </section>
    
    <section id="how-it-works" class="my-5">
      <h2 class="text-center mb-4" data-i18n="how.title">Local Guideの使い方</h2>
      <div class="row">
        <div class="col-md-3 mb-4">
          <div class="text-center">
            <div class="step-number">1</div>
            <h3 class="h5 mt-3" data-i18n="how.step1.title">アカウント登録</h3>
            <p data-i18n="how.step1.desc">簡単な情報入力でアカウントを作成します。</p>
          </div>
        </div>
        <div class="col-md-3 mb-4">
          <div class="text-center">
            <div class="step-number">2</div>
            <h3 class="h5 mt-3" data-i18n="how.step2.title">ガイドを探す</h3>
            <p data-i18n="how.step2.desc">ガイドとチャットで話し、気に入ったガイドを選べます。</p>
          </div>
        </div>
        <div class="col-md-3 mb-4">
          <div class="text-center">
            <div class="step-number">3</div>
            <h3 class="h5 mt-3" data-i18n="how.step3.title">予約を確定</h3>
            <p data-i18n="how.step3.desc">日時や希望内容を指定して予約リクエストを送信します。</p>
          </div>
        </div>
        <div class="col-md-3 mb-4">
          <div class="text-center">
            <div class="step-number">4</div>
            <h3 class="h5 mt-3" data-i18n="how.step4.title">ツアーを楽しむ</h3>
            <p data-i18n="how.step4.desc">現地で実際にガイドと会い、特別な体験を楽しみましょう。</p>
          </div>
        </div>
      </div>
    </section>
    
    <section id="about" class="my-5 py-4 bg-light rounded">
      <div class="container">
        <h2 class="text-center mb-4" data-i18n="about.title">Local Guideについて</h2>
        <div class="row justify-content-center">
          <div class="col-md-8">
            <p data-i18n="about.desc1">Local Guideは、旅行者と現地ガイドをつなぐマッチングサービスです。旅行の醍醐味は、その土地の文化や歴史、そして人々との交流にあります。</p>
            <p data-i18n="about.desc2">私たちは、旅行者がより深く、より本物の体験ができるよう、地元の知識を持ったガイドとの出会いの場を提供しています。</p>
            <p data-i18n="about.desc3">また、地元の方々がガイドとして活躍することで、地域の活性化や文化交流の促進も目指しています。</p>
          </div>
        </div>
      </div>
    </section>
    
    <section id="become-guide" class="my-5">
      <div class="row align-items-center">
        <div class="col-md-7">
          <h2 data-i18n="become.title">あなたも地元ガイドになりませんか？</h2>
          <p class="lead" data-i18n="become.subtitle">あなたの地元の知識や情熱を活かして、世界中の旅行者に特別な体験を提供しましょう。</p>
          <ul class="list-unstyled">
            <li><i data-feather="check" class="me-2"></i> <span data-i18n="become.point1">自分のペースで働ける柔軟性</span></li>
            <li><i data-feather="check" class="me-2"></i> <span data-i18n="become.point2">世界中の人々と交流する機会</span></li>
            <li><i data-feather="check" class="me-2"></i> <span data-i18n="become.point3">あなたの専門知識や情熱を共有</span></li>
            <li><i data-feather="check" class="me-2"></i> <span class="fst-italic" data-i18n="become.tagline">あなたの日常が観光資源に</span></li>
            <li><i data-feather="check" class="me-2"></i> 追加収入の獲得</li>
          </ul>
          <button class="btn btn-light mt-3" id="become-guide-btn">ガイドとして登録する</button>
        </div>
        <div class="col-md-5">
          <img src="https://images.unsplash.com/photo-1516726817505-f5ed825624d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80" alt="地元ガイド" class="img-fluid rounded shadow">
        </div>
      </div>
    </section>
  </div>
  
  <div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="loginModalLabel" data-i18n="auth.login.title">ログイン</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="login-form">
            <div class="mb-3">
              <label for="login-username" class="form-label" data-i18n="auth.username">ユーザー名</label>
              <input type="text" class="form-control" id="login-username" required>
            </div>
            <div class="mb-3">
              <label for="login-password" class="form-label" data-i18n="auth.password">パスワード</label>
              <input type="password" class="form-control" id="login-password" required>
            </div>
            <div class="alert alert-danger d-none" id="login-error"></div>
            <button type="submit" class="btn btn-primary w-100" data-i18n="auth.login_button">ログイン</button>
          </form>
          <div class="text-center mt-3">
            <p><span data-i18n="auth.register_invite">アカウントをお持ちでない方は</span> <a href="#" id="show-register" data-i18n="auth.register_link">新規登録</a></p>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="modal fade" id="userTypeModal" tabindex="-1" aria-labelledby="userTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="userTypeModalLabel" data-i18n="auth.select_user_type">アカウントタイプを選択</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row text-center">
            <div class="col-md-6 mb-3">
              <div class="card h-100 user-type-card" id="tourist-card">
                <div class="card-body d-flex flex-column align-items-center justify-content-center p-4">
                  <div class="icon-container mb-3">
                    <i data-feather="map" class="user-type-icon"></i>
                  </div>
                  <h5 class="card-title" data-i18n="auth.tourist">観光客</h5>
                  <p class="card-text" data-i18n="auth.tourist_desc">地元ガイドとの特別な旅を体験</p>
                  <button class="btn btn-outline-primary mt-auto" id="select-tourist-btn" data-i18n="auth.select_tourist">観光客として登録</button>
                </div>
              </div>
            </div>
            <div class="col-md-6 mb-3">
              <div class="card h-100 user-type-card" id="guide-card">
                <div class="card-body d-flex flex-column align-items-center justify-content-center p-4">
                  <div class="icon-container mb-3">
                    <i data-feather="compass" class="user-type-icon"></i>
                  </div>
                  <h5 class="card-title" data-i18n="auth.guide">ガイド</h5>
                  <p class="card-text" data-i18n="auth.guide_desc">あなたの地元知識を活かして収入を得る</p>
                  <button class="btn btn-outline-primary mt-auto" id="select-guide-btn" data-i18n="auth.select_guide">ガイドとして登録</button>
                </div>
              </div>
            </div>
          </div>
          <div class="text-center mt-3">
            <p><span data-i18n="auth.login_invite">すでにアカウントをお持ちの方は</span> <a href="#" id="show-login-from-type" data-i18n="auth.login_link">ログイン</a></p>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="modal fade" id="touristRegisterModal" tabindex="-1" aria-labelledby="touristRegisterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="touristRegisterModalLabel" data-i18n="auth.tourist_register">観光客アカウント登録</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="tourist-register-form">
            <div class="row mb-3">
              <div class="col">
                <label for="tourist-firstname" class="form-label" data-i18n="auth.firstname">名</label>
                <input type="text" class="form-control" id="tourist-firstname" required>
              </div>
              <div class="col">
                <label for="tourist-lastname" class="form-label" data-i18n="auth.lastname">姓</label>
                <input type="text" class="form-control" id="tourist-lastname" required>
              </div>
            </div>
            <div class="mb-3">
              <label for="tourist-username" class="form-label" data-i18n="auth.username">ユーザー名</label>
              <input type="text" class="form-control" id="tourist-username" required>
            </div>
            <div class="mb-3">
              <label for="tourist-email" class="form-label" data-i18n="auth.email">メールアドレス</label>
              <input type="email" class="form-control" id="tourist-email" required>
            </div>
            <div class="mb-3">
              <label for="tourist-phone" class="form-label" data-i18n="auth.phone">電話番号</label>
              <div class="input-group">
                <input type="tel" class="form-control" id="tourist-phone" placeholder="+81901234567" required>
                <button type="button" class="btn btn-outline-primary" id="tourist-verify-phone" data-i18n="auth.verify_phone">認証</button>
              </div>
              <small class="form-text text-muted" data-i18n="auth.phone_format">国際形式で入力してください（例：+819012345678）</small>
              <div class="mt-2">
                <span class="badge bg-warning text-dark d-none" id="tourist-phone-pending"><i data-feather="clock" class="me-1"></i> <span data-i18n="auth.verification_pending">認証待ち</span></span>
                <span class="badge bg-success d-none" id="tourist-phone-verified"><i data-feather="check" class="me-1"></i> <span data-i18n="auth.verification_complete">認証済み</span></span>
              </div>
            </div>
            <div class="mb-3">
              <label for="tourist-password" class="form-label" data-i18n="auth.password">パスワード</label>
              <input type="password" class="form-control" id="tourist-password" required>
            </div>
            <div class="mb-3">
              <label for="tourist-confirm-password" class="form-label" data-i18n="auth.confirm_password">パスワード（確認）</label>
              <input type="password" class="form-control" id="tourist-confirm-password" required>
            </div>
            <div class="mb-3">
              <label class="form-label" data-i18n="auth.id_document">本人確認書類</label>
              <button type="button" class="btn btn-outline-primary w-100" id="tourist-upload-id" class="tourist-upload-btn" class="tourist-upload-btn" data-i18n="auth.upload_id">本人確認書類をアップロード</button>
              <div class="mt-2">
                <span class="badge bg-warning text-dark d-none" id="tourist-id-pending"><i data-feather="clock" class="me-1"></i> <span data-i18n="auth.verification_pending">認証待ち</span></span>
                <span class="badge bg-success d-none" id="tourist-id-verified"><i data-feather="check" class="me-1"></i> <span data-i18n="auth.verification_complete">認証済み</span></span>
              </div>
            </div>
            
            <input type="hidden" name="type" value="tourist">
            <div class="alert alert-danger d-none" id="tourist-register-error"></div>
            <button type="submit" class="btn btn-primary w-100" data-i18n="auth.register_button">登録する</button>
          </form>
          <div class="text-center mt-3">
            <p><a href="#" id="back-to-user-type" data-i18n="auth.back_to_selection">ユーザータイプ選択に戻る</a></p>
            <p><span data-i18n="auth.login_invite">すでにアカウントをお持ちの方は</span> <a href="#" id="show-login-from-tourist" data-i18n="auth.login_link">ログイン</a></p>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="modal fade" id="guideRegisterModal" tabindex="-1" aria-labelledby="guideRegisterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="guideRegisterModalLabel" data-i18n="auth.guide_register">ガイドアカウント登録</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="guide-register-form">
            <div class="row mb-3">
              <div class="col">
                <label for="guide-firstname" class="form-label" data-i18n="auth.firstname">名</label>
                <input type="text" class="form-control" id="guide-firstname" required>
              </div>
              <div class="col">
                <label for="guide-lastname" class="form-label" data-i18n="auth.lastname">姓</label>
                <input type="text" class="form-control" id="guide-lastname" required>
              </div>
            </div>
            <div class="mb-3">
              <label for="guide-username" class="form-label" data-i18n="auth.username">ユーザー名</label>
              <input type="text" class="form-control" id="guide-username" required>
            </div>
            <div class="mb-3">
              <label for="guide-email" class="form-label" data-i18n="auth.email">メールアドレス</label>
              <input type="email" class="form-control" id="guide-email" required>
            </div>
            <div class="mb-3">
              <label for="guide-phone" class="form-label" data-i18n="auth.phone">電話番号</label>
              <div class="input-group">
                <input type="tel" class="form-control" id="guide-phone" placeholder="+81901234567" required>
                <button type="button" class="btn btn-outline-primary" id="guide-verify-phone" data-i18n="auth.verify_phone">認証</button>
              </div>
              <small class="form-text text-muted" data-i18n="auth.phone_format">国際形式で入力してください（例：+819012345678）</small>
              <div class="mt-2">
                <span class="badge bg-warning text-dark d-none" id="guide-phone-pending"><i data-feather="clock" class="me-1"></i> <span data-i18n="auth.verification_pending">認証待ち</span></span>
            </div>
            <div class="mb-3">
              <label class="form-label" data-i18n="auth.id_document">本人確認書類</label>
              <button type="button" class="btn btn-outline-primary w-100" id="guide-upload-id" data-i18n="auth.upload_id">本人確認書類をアップロード</button>
              <div class="mt-2">
                <span class="badge bg-warning text-dark d-none" id="guide-id-pending"><i data-feather="clock" class="me-1"></i> <span data-i18n="auth.verification_pending">認証待ち</span></span>
                <span class="badge bg-success d-none" id="guide-id-verified"><i data-feather="check" class="me-1"></i> <span data-i18n="auth.verification_complete">認証済み</span></span>
              </div>
            </div>
            <div class="mb-3">
              <label for="guide-city" class="form-label" data-i18n="auth.city">活動地域（都市）</label>
              <input type="text" class="form-control" id="guide-city" required>
            </div>
            <div class="mb-3">
              <label for="guide-languages" class="form-label" data-i18n="auth.languages">対応言語</label>
              <div class="input-group mb-2">
                <select class="form-select" id="guide-language-select">
                  <option value="ja">日本語</option>
                  <option value="en">英語</option>
                  <option value="zh">中国語</option>
                  <option value="ko">韓国語</option>
                  <option value="fr">フランス語</option>
                  <option value="es">スペイン語</option>
                  <option value="de">ドイツ語</option>
                  <option value="it">イタリア語</option>
                </select>
                <button class="btn btn-outline-secondary" type="button" id="add-language-btn">追加</button>
              </div>
              <div id="selected-languages" class="d-flex flex-wrap gap-2 mb-2"></div>
              <input type="hidden" id="guide-languages-input" name="languages">
            </div>
            <div class="mb-3">
              <label for="guide-password" class="form-label" data-i18n="auth.password">パスワード</label>
              <input type="password" class="form-control" id="guide-password" required>
            </div>
            <div class="mb-3">
              <label for="guide-confirm-password" class="form-label" data-i18n="auth.confirm_password">パスワード（確認）</label>
              <input type="password" class="form-control" id="guide-confirm-password" required>
            </div>
            <input type="hidden" name="type" value="guide">
            <div class="alert alert-danger d-none" id="guide-register-error"></div>
            <button type="submit" class="btn btn-primary w-100" data-i18n="auth.register_button">登録する</button>
          </form>
          <div class="text-center mt-3">
            <p><a href="#" id="back-to-user-type-from-guide" data-i18n="auth.back_to_selection">ユーザータイプ選択に戻る</a></p>
            <p><span data-i18n="auth.login_invite">すでにアカウントをお持ちの方は</span> <a href="#" id="show-login-from-guide" data-i18n="auth.login_link">ログイン</a></p>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="modal fade" id="phoneVerificationModal" tabindex="-1" aria-labelledby="phoneVerificationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="phoneVerificationModalLabel" data-i18n="verification.phone_title">電話番号認証</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="text-center mb-4">
            <div class="icon-container mx-auto mb-3">
              <i data-feather="smartphone" class="text-primary" style="width: 32px; height: 32px;"></i>
            </div>
            <h6 data-i18n="verification.phone_subtitle">安全なサービス利用のため、電話番号を認証してください</h6>
          </div>
          
          <div class="verification-steps">
            
            <div id="verification-step-1" class="step active">
              <div class="mb-3">
                <label for="verification-phone" class="form-label" data-i18n="auth.phone">電話番号</label>
                <div class="input-group">
                  <input type="tel" class="form-control" id="verification-phone" placeholder="+81901234567" required>
                  <button class="btn btn-primary" id="send-verification-code" data-i18n="verification.send_code">コードを送信</button>
                </div>
                <small class="form-text text-muted" data-i18n="auth.phone_format">国際形式で入力してください（例：+819012345678）</small>
              </div>
              
              <div id="recaptcha-container" class="mb-3"></div>
              
              <div id="recaptcha-container" class="mb-3"></div>
              
          <div id="document-error" class="alert alert-danger d-none" role="alert"></div>
              <div class="alert alert-info" role="alert">
                <i data-feather="info" class="me-2"></i>
                <span data-i18n="verification.phone_info">認証コードは開発環境ではコンソールに表示されます</span>
              </div>
            </div>
            
            
            <div id="verification-step-2" class="step d-none">
              <p data-i18n="verification.code_sent">入力した電話番号にSMSでコードを送信しました</p>
              
              <div class="verification-code-container mb-4">
                <label for="verification-code" class="form-label" data-i18n="verification.enter_code">認証コード</label>
                <div class="d-flex justify-content-center mb-2">
                  <input type="text" class="form-control verification-code-input" id="verification-code" placeholder="6桁のコード" maxlength="6" inputmode="numeric" pattern="[0-9]*">
                </div>
                <div class="text-center">
                  <button type="button" class="btn btn-link btn-sm" id="resend-code" data-i18n="verification.resend_code">コードを再送信</button>
                  <span class="text-muted ms-2" id="code-timer">2:59</span>
                </div>
              </div>
              
              <div class="d-grid">
                <button class="btn btn-primary" id="verify-code" data-i18n="verification.verify_code">コードを確認</button>
              </div>
            </div>
            
            
            <div id="verification-step-3" class="step d-none text-center">
              <div class="verification-success mb-4">
                <div class="icon-container bg-success mx-auto mb-3">
                  <i data-feather="check" class="text-white" style="width: 32px; height: 32px;"></i>
                </div>
                <h5 data-i18n="verification.success_title">認証が完了しました！</h5>
                <p data-i18n="verification.success_message">電話番号の認証が完了しました。サービスをお楽しみください。</p>
              </div>
              
              <div class="d-grid">
                <button class="btn btn-success" id="verification-complete" data-i18n="verification.continue">続ける</button>
              </div>
            </div>
          </div>
          
          <div class="alert alert-danger mt-3 d-none" id="verification-error"></div>
        </div>
      </div>
    </div>
  </div>
  
<div class="modal fade" id="idDocumentModal" tabindex="-1" aria-labelledby="idDocumentModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="idDocumentModalLabel" data-i18n="verification.id_document_title">本人確認書類のアップロード</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="text-center mb-4">
          <div class="icon-container mx-auto mb-3">
            <i data-feather="shield" class="text-primary" style="width: 32px; height: 32px;"></i>
          </div>
          <h6 data-i18n="verification.id_subtitle">安全なコミュニティのために、本人確認を行ってください</h6>
        </div>
        
        <div id="document-error" class="alert alert-danger d-none" role="alert"></div>
        
        <div class="alert alert-info" role="alert">
          <i data-feather="info" class="me-2"></i>
          <span data-i18n="verification.id_info">アップロードされた書類は厳重に管理され、確認後に承認されます</span>
        </div>
        
        <form id="id-document-form">
            <input type="hidden" name="user-type" value="guide">
          <div class="mb-4">
            <label for="document-type" class="form-label" data-i18n="verification.document_type">証明書の種類</label>
            <select class="form-select" id="document-type" required>
              <option value="" data-i18n="verification.select_document">選択してください</option>
              <option value="passport" data-i18n="verification.passport">パスポート</option>
              <option value="driverLicense" data-i18n="verification.drivers_license">運転免許証</option>
              <option value="idCard" data-i18n="verification.id_card">マイナンバーカード</option>
              <option value="residentCard" data-i18n="verification.resident_card">在留カード</option>
            </select>
          </div>
          
          
          <div class="mb-4 d-none" id="driver-license-front-container">
            <label for="document-file-front" class="form-label" data-i18n="verification.upload_document_front">証明書のアップロード（表面）</label>
            <div class="document-upload-container p-3 border rounded text-center">
              <div id="document-preview-front" class="mb-3 d-none">
                <img id="document-image-preview-front" class="img-fluid mb-2 border rounded" alt="表面プレビュー">
                <button type="button" class="btn btn-sm btn-outline-danger" id="remove-document-front" data-i18n="verification.remove">削除</button>
              </div>
              <div id="document-upload-prompt-front">
                <i data-feather="upload-cloud" class="mb-2" style="width: 48px; height: 48px; color: #ccc;"></i>
                <p class="mb-2" data-i18n="verification.drag_drop_front">表面：ファイルをドラッグ&ドロップするか、クリックして選択</p>
                <input class="form-control d-none" type="file" id="document-file-front" accept="image/*,.pdf">
                <button type="button" class="btn btn-outline-primary btn-sm" id="select-document-front" data-i18n="verification.select_file">ファイルを選択</button>
              </div>
            </div>
            <small class="form-text text-muted" data-i18n="verification.file_types">JPG、PNG、PDF形式のファイル（5MB以内）</small>
          </div>
          
          <div class="mb-4 d-none" id="driver-license-back-container">
            <label for="document-file-back" class="form-label" data-i18n="verification.upload_document_back">証明書のアップロード（裏面）</label>
            <div class="document-upload-container p-3 border rounded text-center">
              <div id="document-preview-back" class="mb-3 d-none">
                <img id="document-image-preview-back" class="img-fluid mb-2 border rounded" alt="裏面プレビュー">
                <button type="button" class="btn btn-sm btn-outline-danger" id="remove-document-back" data-i18n="verification.remove">削除</button>
              </div>
              <div id="document-upload-prompt-back">
                <i data-feather="upload-cloud" class="mb-2" style="width: 48px; height: 48px; color: #ccc;"></i>
                <p class="mb-2" data-i18n="verification.drag_drop_back">裏面：ファイルをドラッグ&ドロップするか、クリックして選択</p>
                <input class="form-control d-none" type="file" id="document-file-back" accept="image/*,.pdf">
                <button type="button" class="btn btn-outline-primary btn-sm" id="select-document-back" data-i18n="verification.select_file">ファイルを選択</button>
              </div>
            </div>
            <small class="form-text text-muted" data-i18n="verification.file_types">JPG、PNG、PDF形式のファイル（5MB以内）</small>
          </div>
          
          <div class="mb-4" id="other-document-container">
            <label for="document-file" class="form-label" data-i18n="verification.upload_document">証明書のアップロード</label>
            <div class="document-upload-container p-3 border rounded text-center">
              <div id="document-preview" class="mb-3 d-none">
                <img id="document-image-preview" class="img-fluid mb-2 border rounded" alt="プレビュー">
                <button type="button" class="btn btn-sm btn-outline-danger" id="remove-document" data-i18n="verification.remove">削除</button>
              </div>
              <div id="document-upload-prompt">
                <i data-feather="upload-cloud" class="mb-2" style="width: 48px; height: 48px; color: #ccc;"></i>
                <p class="mb-2" data-i18n="verification.drag_drop">ファイルをドラッグ&ドロップするか、クリックして選択</p>
                <input class="form-control d-none" type="file" id="document-file" accept="image/*,.pdf" required>
                <button type="button" class="btn btn-outline-primary btn-sm" id="select-document" data-i18n="verification.select_file">ファイルを選択</button>
              </div>
            </div>
            <small class="form-text text-muted" data-i18n="verification.file_types">JPG、PNG、PDF形式のファイル（5MB以内）</small>
          </div>
          
          <div class="form-check mb-4">
            <input class="form-check-input" type="checkbox" id="document-consent" required>
            <label class="form-check-label" for="document-consent" data-i18n="verification.consent">
              私は本人確認のためにこの書類を提供することに同意します
            </label>
          </div>
          
          
          <div class="mt-4">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-i18n="common.cancel">キャンセル</button>
            <button type="submit" class="btn btn-primary" id="document-upload-btn" data-i18n="verification.upload">書類をアップロード</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
  <div class="modal fade" id="idDocumentModal" tabindex="-1" aria-labelledby="idDocumentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="idDocumentModalLabel" data-i18n="verification.id_title">本人確認書類のアップロード</h5>
          <div id="document-error" class="alert alert-danger d-none" role="alert"></div>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="text-center mb-4">
            <div class="icon-container mx-auto mb-3">
              <i data-feather="shield" class="text-primary" style="width: 32px; height: 32px;"></i>
            </div>
            <h6 data-i18n="verification.id_subtitle">安全なコミュニティのために、本人確認を行ってください</h6>
          </div>
          
          <div id="document-error" class="alert alert-danger d-none" role="alert"></div>
          
          <div id="document-error" class="alert alert-danger d-none" role="alert"></div>
          <div class="alert alert-info" role="alert">
            <i data-feather="info" class="me-2"></i>
            <span data-i18n="verification.id_info">アップロードされた書類は厳重に管理され、確認後に承認されます</span>
          </div>
          
          <form id="id-document-form">
            <input type="hidden" name="user-type" value="guide">
            <div class="mb-4">
              <label for="document-type" class="form-label" data-i18n="verification.document_type">証明書の種類</label>
              <select class="form-select" id="document-type" required>
                <option value="" data-i18n="verification.select_document">選択してください</option>
                <option value="passport" data-i18n="verification.passport">パスポート</option>
                <option value="driverLicense" data-i18n="verification.drivers_license">運転免許証</option>
                <option value="idCard" data-i18n="verification.id_card">マイナンバーカード</option>
                <option value="residentCard" data-i18n="verification.resident_card">在留カード</option>
              </select>
            </div>
            
            
            <div class="mb-4" id="driver-license-front-container">
              <label for="document-file-front" class="form-label" data-i18n="verification.upload_document_front">証明書のアップロード（表面）</label>
              <div class="document-upload-container p-3 border rounded text-center">
                <div id="document-preview-front" class="mb-3 d-none">
                  <img id="document-image-preview-front" class="img-fluid mb-2 border rounded" alt="表面プレビュー">
                  <button type="button" class="btn btn-sm btn-outline-danger" id="remove-document-front" data-i18n="verification.remove">削除</button>
                </div>
                <div id="document-upload-prompt-front">
                  <i data-feather="upload-cloud" class="mb-2" style="width: 48px; height: 48px; color: #ccc;"></i>
                  <p class="mb-2" data-i18n="verification.drag_drop_front">表面：ファイルをドラッグ&ドロップするか、クリックして選択</p>
                  <input class="form-control d-none" type="file" id="document-file-front" accept="image/*,.pdf" required>
                  <button type="button" class="btn btn-outline-primary btn-sm" id="select-document-front" data-i18n="verification.select_file">ファイルを選択</button>
                </div>
              </div>
              <small class="form-text text-muted" data-i18n="verification.file_types">JPG、PNG、PDF形式のファイル（5MB以内）</small>
            </div>
            
            <div class="mb-4 d-none" id="driver-license-back-container">
              <label for="document-file-back" class="form-label" data-i18n="verification.upload_document_back">証明書のアップロード（裏面）</label>
              <div class="document-upload-container p-3 border rounded text-center">
                <div id="document-preview-back" class="mb-3 d-none">
                  <img id="document-image-preview-back" class="img-fluid mb-2 border rounded" alt="裏面プレビュー">
                  <button type="button" class="btn btn-sm btn-outline-danger" id="remove-document-back" data-i18n="verification.remove">削除</button>
                </div>
                <div id="document-upload-prompt-back">
                  <i data-feather="upload-cloud" class="mb-2" style="width: 48px; height: 48px; color: #ccc;"></i>
                  <p class="mb-2" data-i18n="verification.drag_drop_back">裏面：ファイルをドラッグ&ドロップするか、クリックして選択</p>
                  <input class="form-control d-none" type="file" id="document-file-back" accept="image/*,.pdf">
                  <button type="button" class="btn btn-outline-primary btn-sm" id="select-document-back" data-i18n="verification.select_file">ファイルを選択</button>
                </div>
              </div>
              <small class="form-text text-muted" data-i18n="verification.file_types">JPG、PNG、PDF形式のファイル（5MB以内）</small>
            </div>
            
            <div class="mb-4" id="other-document-container">
              <label for="document-file" class="form-label" data-i18n="verification.upload_document">証明書のアップロード</label>
              <div class="document-upload-container p-3 border rounded text-center">
                <div id="document-preview" class="mb-3 d-none">
                  <img id="document-image-preview" class="img-fluid mb-2 border rounded" alt="プレビュー">
                  <button type="button" class="btn btn-sm btn-outline-danger" id="remove-document" data-i18n="verification.remove">削除</button>
                </div>
                <div id="document-upload-prompt">
                  <i data-feather="upload-cloud" class="mb-2" style="width: 48px; height: 48px; color: #ccc;"></i>
                  <p class="mb-2" data-i18n="verification.drag_drop">ファイルをドラッグ&ドロップするか、クリックして選択</p>
                  <input class="form-control d-none" type="file" id="document-file" accept="image/*,.pdf" required>
                  <button type="button" class="btn btn-outline-primary btn-sm" id="select-document" data-i18n="verification.select_file">ファイルを選択</button>
                </div>
              </div>
              <small class="form-text text-muted" data-i18n="verification.file_types">JPG、PNG、PDF形式のファイル（5MB以内）</small>
            </div>
            
            <div class="mb-4">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="document-consent" required>
                <label class="form-check-label" for="document-consent" data-i18n="verification.consent">
                  私は本人確認のためにこの書類を提供することに同意します
                </label>
              </div>
            </div>
            
            <div class="alert alert-danger mt-3 d-none" id="document-error"></div>
            
            <div class="d-grid">
              <button type="submit" class="btn btn-primary" data-i18n="verification.upload_button">書類をアップロード</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  
  <div class="modal fade" id="verificationStatusModal" tabindex="-1" aria-labelledby="verificationStatusModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="verificationStatusModalLabel" data-i18n="verification.status_title">認証ステータス</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="verification-status-container">
            
            <div class="verification-item mb-4 p-3 border rounded">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h6 class="mb-1" data-i18n="verification.phone_verification">電話番号認証</h6>
                  <p class="text-muted mb-0" id="phone-number-display">+81xxxxxxxx</p>
                </div>
                <div id="phone-status-badge" class="verification-badge pending">
                  <span id="phone-status-text" data-i18n="verification.pending">保留中</span>
                </div>
              </div>
              <div class="mt-3">
                <button class="btn btn-sm btn-outline-primary d-none" id="start-phone-verification" data-i18n="verification.verify_now">今すぐ認証</button>
                <p class="verification-message d-none" id="phone-verification-message"></p>
              </div>
            </div>
            
            
            <div class="verification-item mb-4 p-3 border rounded">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h6 class="mb-1" data-i18n="verification.id_verification">本人確認書類</h6>
                  <p class="text-muted mb-0" id="document-type-display">未提出</p>
                </div>
                <div id="id-status-badge" class="verification-badge unverified">
                  <span id="id-status-text" data-i18n="verification.unverified">未認証</span>
                </div>
              </div>
              <div class="mt-3">
                <button class="btn btn-sm btn-outline-primary" id="upload-id-document" data-i18n="verification.upload_now">今すぐアップロード</button>
                <p class="verification-message d-none" id="id-verification-message"></p>
              </div>
            </div>
            
            
          <div id="document-error" class="alert alert-danger d-none" role="alert"></div>
            <div class="alert alert-info" role="alert">
              <i data-feather="info" class="me-2"></i>
              <span data-i18n="verification.help_message">認証に問題がある場合は、サポートまでお問い合わせください</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <footer class="bg-dark text-white py-4 mt-5">
    <div class="container">
      <div class="row">
        <div class="col-md-4 mb-3">
          <h5><i data-feather="map" class="me-2"></i> Local Guide</h5>
          <p class="text-muted" data-i18n="footer.subtitle">現地ガイドとの出会い、特別な旅の体験を</p>
        </div>
        <div class="col-md-4 mb-3">
          <h5 data-i18n="footer.links">リンク</h5>
          <ul class="list-unstyled">
            <li><a href="#" class="text-white-50">ホーム</a></li>
            <li><a href="#guides" class="text-white-50">ガイドを探す</a></li>
            <li><a href="#how-it-works" class="text-white-50">使い方</a></li>
            <li><a href="#about" class="text-white-50">サービスについて</a></li>
          </ul>
        </div>
        <div class="col-md-4">
          <h5 data-i18n="footer.contact">お問い合わせ</h5>
          <ul class="list-unstyled text-white-50">
            <li><i data-feather="mail" class="me-2"></i> support@localguide.jp</li>
            <li><i data-feather="phone" class="me-2"></i> 03-1234-5678</li>
          </ul>
        </div>
      </div>
      <hr class="my-4 bg-secondary">
      <div class="text-center text-white-50">
        <p data-i18n="footer.copyright">&copy; 2023 Local Guide. All rights reserved.</p>
      </div>
    </div>
  
  <script>
    // 電話番号認証の開始
    window.initPhoneAuth = function(containerId) {
      console.log('電話番号認証の初期化（モック）');
    };
    
    // 確認コードの送信
    window.sendVerificationCode = async function(phoneNumber) {
      console.log('確認コード送信（モック）:', phoneNumber);
      return { verificationId: 'mock-verification-id', mockCode: '123456' };
    };
    
    // コード検証
    window.verifyCode = async function(code) {
      console.log('コード検証（モック）:', code);
      if (code === '123456') {
        return { success: true };
      } else {
        throw new Error('無効なコードです');
      }
    };
    
    // 認証状態変更監視
    window.onAuthStateChanged = function(callback) {
      console.log('認証状態変更監視（モック）');
    };
    
    // 現在のユーザー取得
    window.getCurrentUser = function() {
      return null;
    };
    
    // サインアウト
    window.signOut = async function() {
      console.log('サインアウト（モック）');
    };
  </script>
  
  <script src="translations/ja.js"></script>
  <script src="translations/en.js"></script>
  
  
  <script src="translations/i18n.js"></script>
  <script src="clean_fix.js"></script>
  <script src="tourist_button_fix.js"></script>
  <script src="script.js"></script>
  <script src="test_mock_code.js"></script>
  <script src="document_upload_direct.js"></script>
  <script src="document_upload_update.js"></script>
  <script src="tourist_id_document.js"></script>
  <script src="emergency_fix.js"></script>
  <script src="direct_id_document_modal.js"></script>
  <script src="emergency_fix.js"></script>
  <script src="direct_id_document_modal.js"></script>
  
  <script>
    // Featherアイコンを初期化
    document.addEventListener('DOMContentLoaded', function() {
      feather.replace();
    });
  </script>
  
  <script>
  // ボタンが機能しない問題の緊急修正
  document.addEventListener("DOMContentLoaded", function() {
    // モーダル表示イベント検知
    document.addEventListener("shown.bs.modal", function(e) {
      if (e.target.id === "idDocumentModal") {
        const uploadBtn = document.getElementById("document-upload-btn");
        if (uploadBtn) {
          uploadBtn.onclick = function(e) {
            e.preventDefault();
            const documentType = document.getElementById("document-type")?.value;
            
            if (!documentType) {
              alert("書類の種類を選択してください");
              return false;
            }
            
            const consentCheckbox = document.getElementById("document-consent");
            if (consentCheckbox && !consentCheckbox.checked) {
              alert("同意にチェックを入れてください");
              return false;
            }
            
            let fileInfo = "";
            
            if (documentType === "driverLicense") {
              const frontFile = document.getElementById("document-file-front")?.files?.[0];
              const backFile = document.getElementById("document-file-back")?.files?.[0];
              
              if (!frontFile || !backFile) {
                alert("表面と裏面の両方のファイルを選択してください");
                return false;
              }
              
              fileInfo = frontFile.name + " / " + backFile.name;
            } else {
              const file = document.getElementById("document-file")?.files?.[0];
              
              if (!file) {
                alert("ファイルを選択してください");
                return false;
              }
              
              fileInfo = file.name;
            }
            
            alert("書類アップロード成功（モック）:\n" + documentType + "\nファイル: " + fileInfo);
            
            const modal = bootstrap.Modal.getInstance(document.getElementById("idDocumentModal"));
            if (modal) modal.hide();
            
            return false;
          };
        }
      }
    });
  });
  </script>
  
  <script>
    // 直接観光客アップロードボタンを修正
    (function() {
      const initTouristBtn = function() {
        const touristBtn = document.getElementById("tourist-upload-id");
        if (touristBtn) {
          touristBtn.onclick = function(e) {
            e.preventDefault();
            console.log("観光客アップロードボタンがクリックされました（インライン）");
            
            const idModal = document.getElementById("idDocumentModal");
            if (idModal) {
              // ユーザータイプを設定
              let typeField = idModal.querySelector("input[name=\"user-type\"]");
              if (!typeField) {
                typeField = document.createElement("input");
                typeField.type = "hidden";
                typeField.name = "user-type";
                idModal.querySelector("form").appendChild(typeField);
              }
              typeField.value = "tourist";
              
              // 現在のモーダルを閉じる
              const currentModal = bootstrap.Modal.getInstance(document.getElementById("touristRegisterModal"));
              if (currentModal) {
                currentModal.hide();
                setTimeout(() => {
                  const modal = new bootstrap.Modal(idModal);
                  modal.show();
                }, 300);
              } else {
                const modal = new bootstrap.Modal(idModal);
                modal.show();
              }
            } else {
              alert("身分証明書モーダルが見つかりません");
            }
            
            return false;
          };
          console.log("観光客アップロードボタンを設定しました（インライン）");
        }
      };
      
      // DOM読み込み完了時に実行
      if (document.readyState === "complete" || document.readyState === "interactive") {
        initTouristBtn();
      } else {
        document.addEventListener("DOMContentLoaded", initTouristBtn);
      }
      
      // モーダル表示時にも確認
      document.addEventListener("shown.bs.modal", function(e) {
        if (e.target.id === "touristRegisterModal") {
          console.log("観光客登録モーダルが表示されました");
          initTouristBtn();
        }
      });
    })();
  </script>
  
  <script>
  // 直接観光客アップロードボタンを修正
  (function() {
    const initTouristBtn = function() {
      const touristBtn = document.getElementById("tourist-upload-id");
      if (touristBtn) {
        touristBtn.onclick = function(e) {
          e.preventDefault();
          console.log("観光客アップロードボタンがクリックされました（インライン）");
          
          const idModal = document.getElementById("idDocumentModal");
          if (idModal) {
            // ユーザータイプを設定
            let typeField = idModal.querySelector("input[name=user-type]");
            if (!typeField) {
              typeField = document.createElement("input");
              typeField.type = "hidden";
              typeField.name = "user-type";
              idModal.querySelector("form").appendChild(typeField);
            }
            typeField.value = "tourist";
            
            // 現在のモーダルを閉じる
            const currentModal = bootstrap.Modal.getInstance(document.getElementById("touristRegisterModal"));
            if (currentModal) {
              currentModal.hide();
              setTimeout(() => {
                const modal = new bootstrap.Modal(idModal);
                modal.show();
              }, 300);
            } else {
              const modal = new bootstrap.Modal(idModal);
              modal.show();
            }
          } else {
            alert("身分証明書モーダルが見つかりません");
          }
          
          return false;
        };
        console.log("観光客アップロードボタンを設定しました（インライン）");
      }
    };
    
    // DOM読み込み完了時に実行
    if (document.readyState === "complete" || document.readyState === "interactive") {
      initTouristBtn();
    } else {
      document.addEventListener("DOMContentLoaded", initTouristBtn);
    }
    
    // モーダル表示時にも確認
    document.addEventListener("shown.bs.modal", function(e) {
      if (e.target.id === "touristRegisterModal") {
        console.log("観光客登録モーダルが表示されました");
        initTouristBtn();
      }
    });
  })();
  </script>
  
  <script>
  // APIエラーハンドリングのグローバルフック
  window.addEventListener("error", function(event) {
    console.warn("グローバルエラーハンドラー:", event.error);
    
    // ログアウト関連のエラーを無視
    if (event.error && event.error.toString().includes("logout")) {
      event.preventDefault();
      console.log("ログアウトエラーを無視します");
      return;
    }
  });
  
  // ログアウト関数の再定義
  const originalLogout = window.logout;
  if (originalLogout) {
    window.logout = async function() {
      try {
        // 元のログアウト関数を呼び出し
        await originalLogout();
      } catch (error) {
        console.warn("ログアウトエラーを捕捉:", error);
        // エラーが発生してもUIを更新
        if (typeof updateUIForLoggedOutUser === "function") {
          updateUIForLoggedOutUser();
        }
      }
    };
  }
  </script>
  <script>
  // ページ読み込み完了後に実行（確実に実行）
  document.addEventListener("DOMContentLoaded", function() {
    // 新規登録ボタンを直接セットアップ
    const registerBtn = document.querySelector(".btn.btn-warning, a.btn-warning");
    if (registerBtn) {
      // イベントを設定
      registerBtn.addEventListener("click", function(e) {
        e.preventDefault();
        
        // モーダル表示処理
        const userTypeModal = document.getElementById("userTypeModal");
        if (userTypeModal) {
          // 他のモーダルを閉じる
          document.querySelectorAll(".modal.show").forEach(function(modal) {
            modal.classList.remove("show");
            modal.style.display = "none";
          });
          
          // バックドロップ削除
          document.querySelectorAll(".modal-backdrop").forEach(function(el) {
            el.parentNode.removeChild(el);
          });
          
          // 新しいバックドロップを作成
          const backdrop = document.createElement("div");
          backdrop.className = "modal-backdrop fade show";
          backdrop.style.opacity = "0.25";
          document.body.appendChild(backdrop);
          
          // モーダル表示
          userTypeModal.classList.add("show");
          userTypeModal.style.display = "block";
          userTypeModal.setAttribute("aria-modal", "true");
          userTypeModal.removeAttribute("aria-hidden");
          
          document.body.classList.add("modal-open");
        }
        
        return false;
      });
    }
  });
  </script>
  <!-- 直接ボタン追加スクリプト -->
  <script>
  // ページ読み込み完了後に実行
  document.addEventListener("DOMContentLoaded", function() {
    // ナビゲーションバーを探す
    const navbar = document.querySelector(".navbar-nav, .nav");
    if (navbar) {
      console.log("ナビゲーションバーを発見");
      
      // 既存の新規登録ボタンを削除（重複防止）
      const existingButtons = navbar.querySelectorAll(".btn-warning");
      existingButtons.forEach(function(btn) {
        if (btn.parentNode) btn.parentNode.removeChild(btn);
      });
      
      // 新規登録ボタンを作成
      const registerButton = document.createElement("a");
      registerButton.href = "#";
      registerButton.className = "btn btn-warning btn-sm ms-2";
      registerButton.textContent = "新規登録";
      
      // クリックイベントを設定
      registerButton.addEventListener("click", function(e) {
        e.preventDefault();
        console.log("直接追加した新規登録ボタンがクリックされました");
        
        // モーダル表示処理
        const userTypeModal = document.getElementById("userTypeModal");
        if (userTypeModal) {
          // 他のモーダルを閉じる
          document.querySelectorAll(".modal.show").forEach(function(modal) {
            modal.classList.remove("show");
            modal.style.display = "none";
          });
          
          // バックドロップをクリア
          document.querySelectorAll(".modal-backdrop").forEach(function(el) {
            if (el.parentNode) el.parentNode.removeChild(el);
          });
          
          // 新しいバックドロップを作成
          const backdrop = document.createElement("div");
          backdrop.className = "modal-backdrop fade show";
          backdrop.style.opacity = "0.25";
          document.body.appendChild(backdrop);
          
          // モーダルを表示
          userTypeModal.classList.add("show");
          userTypeModal.style.display = "block";
          userTypeModal.setAttribute("aria-modal", "true");
          userTypeModal.removeAttribute("aria-hidden");
          
          document.body.classList.add("modal-open");
        }
        
        return false;
      });
      
      // ナビゲーションバーに追加
      navbar.appendChild(registerButton);
      console.log("新規登録ボタンをナビゲーションバーに追加しました");
    }
  });
  </script>
</body>
  
  <script>
  // ウィンドウロード時に実行するスクリプト
  window.addEventListener("load", function() {
    console.log("ウィンドウロード時の修正を実行します");
    
    // 新規登録ボタン
    const registerBtn = document.querySelector("a.btn.btn-warning");
    if (registerBtn) {
      console.log("ロード時: 新規登録ボタンを見つけました");
      registerBtn.onclick = function(e) {
        e.preventDefault();
        console.log("ロード時: 新規登録ボタンがクリックされました");
        
        const userTypeModal = document.getElementById("userTypeModal");
        if (userTypeModal) {
          // バックドロップをクリア
          document.querySelectorAll(".modal-backdrop").forEach(function(el) {
            if (el.parentNode) el.parentNode.removeChild(el);
          });
          
          // 他のモーダルを閉じる
          document.querySelectorAll(".modal.show").forEach(function(modal) {
            modal.classList.remove("show");
            modal.style.display = "none";
          });
          
          // 新しいバックドロップを作成
          const backdrop = document.createElement("div");
          backdrop.className = "modal-backdrop fade show";
          backdrop.style.opacity = "0.25";
          document.body.appendChild(backdrop);
          
          // モーダルを表示
          userTypeModal.classList.add("show");
          userTypeModal.style.display = "block";
          userTypeModal.setAttribute("aria-modal", "true");
          userTypeModal.removeAttribute("aria-hidden");
          
          document.body.classList.add("modal-open");
          console.log("ロード時: ユーザータイプモーダルを表示しました");
        }
        return false;
      };
    }
  });
  </script>
</html>
