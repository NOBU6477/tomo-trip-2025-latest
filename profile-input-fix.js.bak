/**
 * プロフィール編集ページの入力欄を修正するスクリプト - 完全修正版
 * シンプルで確実な実装に戻し、テキストエリアとプレビュー機能を確実に動作させます
 */

document.addEventListener('DOMContentLoaded', function() {
  console.log('プロフィール入力欄の修正スクリプトを実行開始...');
  
  // 現在のページを判定
  const currentPage = getCurrentPage();
  console.log('現在のページ:', currentPage);

  // 基本情報ページの場合のみ処理を実行
  if (currentPage === 'basic-info') {
    // 一定時間後に実行して他のスクリプトとの競合を避ける
    setTimeout(initProfileFix, 300);
  } else {
    console.log('基本情報ページではないため、プロフィール修正はスキップします');
    
    // メッセージページなど他のページにあるプレビューを削除
    const existingPreview = document.querySelector('.profile-preview-container');
    if (existingPreview) {
      console.log('他のページにあるプレビューを削除します');
      existingPreview.remove();
    }
  }
});

/**
 * 現在表示されているページを判定
 * @returns {string} ページタイプ: 'basic-info', 'messages', 'gallery', 'schedule', 'account-settings', 'other'
 */
function getCurrentPage() {
  // URLによる判定
  const url = window.location.href;
  if (url.includes('profile-basic') || url.includes('profile.html')) {
    return 'basic-info';
  } else if (url.includes('messages') || url.includes('profile-messages')) {
    return 'messages';
  } else if (url.includes('gallery') || url.includes('profile-gallery')) {
    return 'gallery';
  } else if (url.includes('schedule') || url.includes('profile-schedule')) {
    return 'schedule';
  } else if (url.includes('settings') || url.includes('profile-settings')) {
    return 'account-settings';
  }
  
  // DOM要素による判定（URL判定がうまくいかなかった場合）
  const basicInfoSelected = document.querySelector('.nav-link.active[href*="basic"], .sidebar-item.active:contains("基本情報")');
  if (basicInfoSelected) {
    return 'basic-info';
  }
  
  // 基本情報フォームがあるかどうかで判定
  const basicInfoForm = document.getElementById('profile-basic-form');
  if (basicInfoForm) {
    return 'basic-info';
  }
  
  // 自己紹介テキストエリアがあるかどうかで判定
  const bioTextarea = document.getElementById('guide-description');
  if (bioTextarea) {
    return 'basic-info';
  }
  
  // メッセージページの特徴を確認
  const messageElements = document.querySelectorAll('.message-list, .chat-container, .message-container');
  if (messageElements.length > 0) {
    return 'messages';
  }
  
  return 'other';
}

/**
 * プロフィール修正の初期化 - メイン実行関数
 */
function initProfileFix() {
  console.log('プロフィール修正を初期化します...');
  
  // テキスト入力欄をすべて修正
  fixAllInputFields();
  
  // 特に自己紹介欄を修正
  fixDescriptionTextarea();
  
  // 料金表示を修正
  fixFeeDisplay();
  
  // プレビュー機能をセットアップ
  setupProfilePreview();
  
  // 興味・専門分野のリスナーをセットアップ
  setupInterestListeners();
  
  // ページロード時にもプレビューを更新（デフォルトタグの表示を防ぐため）
  setTimeout(function() {
    console.log('初期プレビュー更新実行');
    updatePreview();
    
    // タグコンテナが空の場合は非表示に
    const previewContainer = document.querySelector('.profile-preview, .preview-card');
    if (previewContainer) {
      const tagsContainer = previewContainer.querySelector('.tags-container, .keywords-container');
      if (tagsContainer && (!tagsContainer.children.length || tagsContainer.children.length === 0)) {
        console.log('空のタグコンテナを非表示にします');
        tagsContainer.style.display = 'none';
      }
    }
  }, 500);
}

/**
 * すべての入力欄を修正
 */
function fixAllInputFields() {
  console.log('すべての入力欄を修正します...');
  
  // テキスト入力欄を対象に
  const inputFields = document.querySelectorAll('input[type="text"], input[type="email"], input[type="number"]');
  inputFields.forEach(input => {
    // 背景色と文字色を明確に
    input.style.backgroundColor = '#ffffff';
    input.style.color = '#000000';
    
    // 枠線と角丸を追加
    input.style.border = '1px solid #0077cc';
    input.style.borderRadius = '4px';
    
    // パディングとサイズを調整
    input.style.padding = '8px 12px';
    input.style.height = 'auto';
    input.style.lineHeight = '1.5';
    
    // フォーカス時の視覚効果を追加
    input.addEventListener('focus', function() {
      this.style.borderColor = '#0099ff';
      this.style.boxShadow = '0 0 0 3px rgba(0, 153, 255, 0.2)';
    });
    
    // フォーカス解除時の効果
    input.addEventListener('blur', function() {
      this.style.borderColor = '#0077cc';
      this.style.boxShadow = 'none';
    });
    
    // 入力イベントをリアルタイムで監視
    input.addEventListener('input', function() {
      console.log(`${input.id || 'input'} の値が変更されました: ${input.value}`);
      updatePreview();
    });
  });
  
  // 言語選択セレクトボックスも修正
  const languageSelect = document.getElementById('guide-languages');
  if (languageSelect) {
    languageSelect.style.border = '1px solid #0077cc';
    languageSelect.style.borderRadius = '4px';
    languageSelect.style.padding = '8px';
    languageSelect.style.backgroundColor = '#ffffff';
    languageSelect.style.color = '#000000';
    languageSelect.style.minHeight = '120px';
    
    // 選択変更時のイベントリスナー
    languageSelect.addEventListener('change', function() {
      console.log('言語選択が変更されました');
      updatePreview();
    });
  }
}

/**
 * 自己紹介テキストエリアを修正
 */
function fixDescriptionTextarea() {
  console.log('自己紹介テキストエリアを修正します...');
  
  // 対象の要素を取得
  const textarea = document.getElementById('guide-description');
  if (!textarea) {
    console.error('自己紹介テキストエリアが見つかりません');
    return;
  }
  
  // まず読み取り専用と無効状態を解除
  textarea.readOnly = false;
  textarea.disabled = false;
  
  // 現在の値を保存
  const currentValue = textarea.value;
  console.log('現在のテキストエリア値:', currentValue);
  
  // スタイルを直接適用（CSSでオーバーライドされないように!importantを使用）
  const cssText = `
    background-color: #ffffff !important;
    color: #000000 !important;
    border: 1px solid #0077cc !important;
    border-radius: 6px !important;
    padding: 12px !important;
    width: 100% !important;
    min-height: 120px !important;
    font-size: 14px !important;
    line-height: 1.5 !important;
    resize: vertical !important;
    display: block !important;
    opacity: 1 !important;
    visibility: visible !important;
    pointer-events: auto !important;
  `;
  
  textarea.style.cssText = cssText;
  
  // 入力イベントリスナーを追加
  textarea.addEventListener('input', function() {
    console.log('テキストエリアに入力がありました:', this.value.substring(0, 20) + '...');
    updatePreview();
  });
  
  // フォーカスイベントを追加
  textarea.addEventListener('focus', function() {
    this.style.borderColor = '#0099ff';
    this.style.boxShadow = '0 0 0 3px rgba(0, 153, 255, 0.2)';
  });
  
  // ブラーイベントを追加
  textarea.addEventListener('blur', function() {
    this.style.borderColor = '#0077cc';
    this.style.boxShadow = 'none';
  });
  
  // 親要素のスタイルも修正して確実に表示されるようにする
  const parent = textarea.parentElement;
  if (parent) {
    parent.style.display = 'block';
    parent.style.marginBottom = '20px';
  }
  
  // テキストエリアの親要素から「hidden」クラスを削除
  const parentWithClasses = textarea.closest('.form-group, .mb-3, .hidden');
  if (parentWithClasses && parentWithClasses.classList.contains('hidden')) {
    parentWithClasses.classList.remove('hidden');
  }
  
  // ラベルも修正
  const label = document.querySelector('label[for="guide-description"]');
  if (label) {
    label.style.fontWeight = '600';
    label.style.marginBottom = '8px';
    label.style.display = 'block';
  }
}

/**
 * 料金表示を修正
 */
function fixFeeDisplay() {
  console.log('料金表示を修正中...');
  
  // 料金入力欄を修正
  const feeInput = document.getElementById('guide-session-fee');
  if (feeInput) {
    feeInput.style.backgroundColor = '#ffffff';
    feeInput.style.color = '#000000';
    feeInput.style.border = '1px solid #0077cc';
    feeInput.style.borderRadius = '0 4px 4px 0';
    feeInput.style.padding = '8px 12px';
    
    // 料金変更時のイベントリスナー
    feeInput.addEventListener('input', function() {
      console.log('料金が変更されました:', this.value);
      updatePreview();
    });
    
    // 入力グループ内の通貨記号部分も修正
    const inputGroup = feeInput.closest('.input-group');
    if (inputGroup) {
      const currencySymbol = inputGroup.querySelector('.input-group-text');
      if (currencySymbol) {
        currencySymbol.style.backgroundColor = '#f8f9fa';
        currencySymbol.style.color = '#0077cc';
        currencySymbol.style.border = '1px solid #0077cc';
        currencySymbol.style.borderRight = 'none';
      }
    }
    
    // 料金タイプのタブも修正
    const feeTabs = document.querySelectorAll('.fee-tab, .nav-link');
    feeTabs.forEach(tab => {
      // アクティブなタブを強調
      if (tab.classList.contains('active') || tab.classList.contains('fee-tab-active')) {
        tab.style.backgroundColor = '#0077cc';
        tab.style.color = '#ffffff';
        
        // 料金タイプを保存（プレビュー表示用）
        const tabType = tab.getAttribute('data-type') || '';
        if (tabType === 'hourly') {
          window.currentFeeType = 'hourly';
        } else {
          window.currentFeeType = 'session';
        }
      } else {
        tab.style.backgroundColor = '#f8f9fa';
        tab.style.color = '#333333';
      }
      
      // クリックイベントを監視して料金タイプを更新
      tab.addEventListener('click', function() {
        const tabType = this.getAttribute('data-type') || '';
        console.log('料金タブがクリックされました:', tabType);
        
        if (tabType === 'hourly') {
          window.currentFeeType = 'hourly';
        } else {
          window.currentFeeType = 'session';
        }
        
        // プレビューを更新
        setTimeout(updatePreview, 100);
      });
    });
  }
}

/**
 * プロフィールプレビューをセットアップ
 */
function setupProfilePreview() {
  console.log('プロフィールプレビューをセットアップします...');
  
  // すでにプレビューがある場合は削除して再作成
  const existingPreview = document.querySelector('.profile-preview-container');
  if (existingPreview) {
    existingPreview.remove();
  }
  
  // プロフィールフォームを取得
  const profileForm = document.getElementById('profile-basic-form');
  if (!profileForm) {
    console.warn('プロフィールフォームが見つかりません');
    return;
  }
  
  // プレビューコンテナを作成
  const previewContainer = document.createElement('div');
  previewContainer.className = 'profile-preview-container card mt-4';
  previewContainer.style.cssText = `
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    position: sticky;
    top: 20px;
    max-height: calc(100vh - 40px);
    overflow-y: auto;
  `;
  
  // プレビューヘッダー
  const previewHeader = document.createElement('div');
  previewHeader.className = 'card-header bg-primary text-white';
  previewHeader.innerHTML = '<h5 class="mb-0"><i class="bi bi-eye-fill me-2"></i>プロフィールプレビュー</h5>';
  previewHeader.style.padding = '12px 16px';
  previewHeader.style.position = 'sticky';
  previewHeader.style.top = '0';
  previewHeader.style.zIndex = '1';
  previewContainer.appendChild(previewHeader);
  
  // プレビューボディ
  const previewBody = document.createElement('div');
  previewBody.className = 'card-body p-3';
  previewContainer.appendChild(previewBody);
  
  // プレビューコンテンツの基本構造
  previewBody.innerHTML = `
    <div class="guide-preview">
      <div class="guide-preview-header d-flex mb-3">
        <div class="guide-preview-photo me-3">
          <img src="/uploads/default-profile.jpg" alt="プロフィール写真" class="rounded-circle" width="80" height="80" style="object-fit: cover;">
        </div>
        <div class="guide-preview-info">
          <h4 class="guide-preview-name mb-1">ガイド名</h4>
          <p class="guide-preview-username text-muted mb-1">@ユーザー名</p>
          <p class="guide-preview-location mb-2"><i class="bi bi-geo-alt-fill me-1"></i>活動地域</p>
          <div class="guide-preview-languages mb-2">
            <span class="badge bg-light text-dark me-1">日本語</span>
          </div>
        </div>
      </div>
      <div class="guide-preview-description mb-3 p-3 bg-light rounded">
        <p class="mb-0">自己紹介文がここに表示されます。</p>
      </div>
      <div class="guide-preview-footer d-flex justify-content-between align-items-center">
        <div class="guide-preview-fee">
          <span class="badge bg-success p-2">
            <i class="bi bi-cash me-1"></i>
            <span class="guide-preview-fee-value">¥6,000 / セッション</span>
          </span>
        </div>
      </div>
    </div>
  `;
  
  // 基本情報コンテンツを探す
  const mainContentContainer = findMainContentContainer();
  
  if (mainContentContainer) {
    console.log('メインコンテンツコンテナが見つかりました - プレビューを追加します');
    
    // 2カラムレイアウトを作成
    const rowContainer = document.createElement('div');
    rowContainer.className = 'row mt-4';
    
    // フォームの親要素を取得
    const formParent = profileForm.parentElement;
    
    // フォームを行コンテナの前に挿入
    if (formParent) {
      formParent.insertBefore(rowContainer, profileForm);
    } else {
      // フォームの親要素が見つからない場合はフォームの前に挿入
      profileForm.parentNode.insertBefore(rowContainer, profileForm);
    }
    
    // 左カラム（フォーム用）を作成
    const formCol = document.createElement('div');
    formCol.className = 'col-lg-8';
    rowContainer.appendChild(formCol);
    
    // フォームを左カラムに移動
    formCol.appendChild(profileForm);
    
    // 右カラム（プレビュー用）を作成
    const previewCol = document.createElement('div');
    previewCol.className = 'col-lg-4';
    rowContainer.appendChild(previewCol);
    
    // プレビューを右カラムに追加
    previewCol.appendChild(previewContainer);
  } else {
    console.log('メインコンテンツコンテナが見つかりません - フォームの後にプレビューを追加します');
    
    // メインコンテンツが見つからない場合はフォームの後に追加
    const formParent = profileForm.parentElement;
    if (formParent) {
      formParent.insertBefore(previewContainer, profileForm.nextSibling);
    } else {
      profileForm.parentNode.insertBefore(previewContainer, profileForm.nextSibling);
    }
  }
  
  // フォーム内のすべての入力要素に変更リスナーを追加
  const allInputs = document.querySelectorAll('input, textarea, select');
  allInputs.forEach(input => {
    // 変更時と入力時に更新
    input.addEventListener('change', function() {
      console.log(`${input.id || 'input'} が変更されました`);
      updatePreview();
    });
    
    input.addEventListener('input', function() {
      console.log(`${input.id || 'input'} に入力がありました`);
      updatePreview();
    });
  });
  
  // チェックボックスの変更も監視
  const checkboxes = document.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      console.log(`チェックボックス ${checkbox.id || ''} が変更されました: ${checkbox.checked}`);
      updatePreview();
    });
  });
  
  // 初回のプレビュー更新
  setTimeout(updatePreview, 100);
  
  // スクロールイベントも監視して位置調整
  window.addEventListener('scroll', function() {
    adjustPreviewPosition();
  });
  
  // リサイズイベントでもプレビュー位置を調整
  window.addEventListener('resize', function() {
    adjustPreviewPosition();
  });
}

/**
 * メインコンテンツコンテナを探す
 */
function findMainContentContainer() {
  // 最も可能性の高い順に検索
  const contentSelectors = [
    '.main-content', 
    '#main-content',
    '.content-container',
    '#content-container',
    '.profile-content',
    '#profile-content',
    '.container > .row > .col-md-8, .container > .row > .col-lg-8',
    '.row > .col-md-8, .row > .col-lg-8'
  ];
  
  for (const selector of contentSelectors) {
    const container = document.querySelector(selector);
    if (container) {
      return container;
    }
  }
  
  // フォーム自体の親コンテナを返す
  const profileForm = document.getElementById('profile-basic-form');
  if (profileForm) {
    return profileForm.closest('.container, .container-fluid, .content');
  }
  
  return null;
}

/**
 * プレビューの位置を調整
 */
function adjustPreviewPosition() {
  const previewContainer = document.querySelector('.profile-preview-container');
  if (!previewContainer) return;
  
  const profileForm = document.getElementById('profile-basic-form');
  if (!profileForm) return;
  
  const formRect = profileForm.getBoundingClientRect();
  const formBottom = formRect.bottom;
  const windowHeight = window.innerHeight;
  
  // フォームの下部がビューポートの下部より上にある場合、
  // プレビューのmax-heightを調整して全体が見えるようにする
  if (formBottom < windowHeight) {
    previewContainer.style.maxHeight = `${windowHeight - formRect.top}px`;
  } else {
    previewContainer.style.maxHeight = 'calc(100vh - 40px)';
  }
}

/**
 * プレビューを更新
 */
function updatePreview() {
  console.log('プレビューを更新します...');
  
  // プレビューコンテナを取得
  const previewContainer = document.querySelector('.profile-preview-container');
  if (!previewContainer) {
    console.warn('プレビューコンテナが見つかりません');
    return;
  }
  
  // 各入力欄の値を取得
  const nameInput = document.getElementById('guide-name');
  const usernameInput = document.getElementById('guide-username');
  const locationInput = document.getElementById('guide-location');
  const descriptionInput = document.getElementById('guide-description');
  const feeInput = document.getElementById('guide-session-fee');
  const languagesSelect = document.getElementById('guide-languages');
  
  // 名前を更新
  if (nameInput) {
    const nameElement = previewContainer.querySelector('.guide-preview-name');
    if (nameElement) {
      nameElement.textContent = nameInput.value || 'ガイド名';
      console.log('名前を更新:', nameInput.value);
    }
  }
  
  // ユーザー名を更新
  if (usernameInput) {
    const usernameElement = previewContainer.querySelector('.guide-preview-username');
    if (usernameElement) {
      usernameElement.textContent = '@' + (usernameInput.value || 'ユーザー名');
      console.log('ユーザー名を更新:', usernameInput.value);
    }
  }
  
  // 場所を更新
  if (locationInput) {
    const locationElement = previewContainer.querySelector('.guide-preview-location');
    if (locationElement) {
      locationElement.innerHTML = `<i class="bi bi-geo-alt-fill me-1"></i>${locationInput.value || '活動地域'}`;
      console.log('場所を更新:', locationInput.value);
    }
  }
  
  // 自己紹介を更新
  if (descriptionInput) {
    const descriptionElement = previewContainer.querySelector('.guide-preview-description p');
    if (descriptionElement) {
      // テキストエリアの値を取得して改行を<br>に変換
      const descriptionText = descriptionInput.value || '自己紹介文がここに表示されます。';
      descriptionElement.innerHTML = descriptionText.replace(/\n/g, '<br>');
      console.log('自己紹介を更新:', descriptionText.substring(0, 30) + '...');
    }
  }
  
  // 料金を更新
  if (feeInput) {
    const feeElement = previewContainer.querySelector('.guide-preview-fee-value');
    if (feeElement) {
      // 料金値を取得して整形
      const feeValue = feeInput.value || '6000';
      const formattedFee = Number(feeValue).toLocaleString();
      
      // 料金タイプを取得
      const hourlyTab = document.querySelector('.fee-tab.fee-tab-active[data-type="hourly"], .fee-tab.active[data-type="hourly"], .nav-link.active[data-type="hourly"]');
      const isHourlyRate = hourlyTab !== null || window.currentFeeType === 'hourly';
      
      console.log('料金タイプ:', isHourlyRate ? 'hourly' : 'session', '値:', formattedFee);
      
      // 料金タイプに応じた表示
      if (isHourlyRate) {
        feeElement.textContent = `¥${formattedFee} / 時間`;
      } else {
        feeElement.textContent = `¥${formattedFee} / セッション`;
      }
    }
  }
  
  // 言語を更新
  if (languagesSelect) {
    const languagesContainer = previewContainer.querySelector('.guide-preview-languages');
    if (languagesContainer) {
      // 既存のバッジをクリア
      languagesContainer.innerHTML = '';
      
      // 選択された言語をバッジとして表示
      let hasSelectedLanguages = false;
      let selectedLanguages = [];
      
      for (let i = 0; i < languagesSelect.options.length; i++) {
        const option = languagesSelect.options[i];
        if (option.selected) {
          selectedLanguages.push(option.textContent);
          const badge = document.createElement('span');
          badge.className = 'badge bg-light text-dark me-1';
          badge.textContent = option.textContent;
          languagesContainer.appendChild(badge);
          hasSelectedLanguages = true;
        }
      }
      
      console.log('言語を更新:', selectedLanguages.join(', '));
      
      // 選択された言語がない場合はデフォルトを表示
      if (!hasSelectedLanguages) {
        const defaultBadge = document.createElement('span');
        defaultBadge.className = 'badge bg-light text-dark me-1';
        defaultBadge.textContent = '日本語';
        languagesContainer.appendChild(defaultBadge);
      }
    }
  }
  
  // タグを更新
  updatePreviewTags(previewContainer);
  
  // プロフィール写真を更新
  updateProfilePhoto(previewContainer);
}

/**
 * プロフィール写真を更新
 */
function updateProfilePhoto(previewContainer) {
  if (!previewContainer) return;
  
  // プレビュー内の写真要素を検索
  const previewPhotoImg = previewContainer.querySelector('.guide-preview-photo img');
  if (!previewPhotoImg) return;
  
  // 左サイドバーのプロフィール写真を探す
  const profilePhoto = document.querySelector('.profile-photo img, .sidebar img, img.rounded-circle, img.profile-image');
  if (profilePhoto && profilePhoto.src) {
    previewPhotoImg.src = profilePhoto.src;
    return;
  }
  
  // 他のプロフィール写真らしき要素を探す
  const otherPhoto = document.querySelector('[src*="profile"], [src*="avatar"], [alt*="profile"], [alt*="avatar"]');
  if (otherPhoto && otherPhoto.src) {
    previewPhotoImg.src = otherPhoto.src;
    return;
  }
}

/**
 * プレビューのタグを更新
 */
function updatePreviewTags(previewContainer) {
  if (!previewContainer) {
    previewContainer = document.querySelector('.profile-preview-container');
    if (!previewContainer) return;
  }
  
  // タグコンテナを取得
  const tagsContainer = previewContainer.querySelector('.guide-preview-tags');
  if (!tagsContainer) return;
  
  // タグのリストを作成
  const tagsList = [];
  
  // チェックされた興味・専門分野のチェックボックスから取得
  const interestCheckboxes = document.querySelectorAll('.interest-checkbox:checked, input[type="checkbox"][name^="interest"]:checked');
  interestCheckboxes.forEach(checkbox => {
    // 関連するラベルテキストを取得
    const label = document.querySelector(`label[for="${checkbox.id}"]`) || 
                checkbox.nextElementSibling;
    
    if (label) {
      tagsList.push(label.textContent.trim());
    }
  });
  
  // 選択中のキーワードアイテムを取得する
  // 画像から見た専門分野・興味キーワードの具体的なセレクタ
  const directKeywordSelector = '.selected-tag, [data-type="tag"], .logotype-marker, .badge:not(.bg-success):not(.bg-light), .badge a';
  
  // 直接的なキーワード要素を優先的に取得
  const directSelectedTags = document.querySelectorAll(directKeywordSelector);
  if (directSelectedTags.length > 0) {
    console.log('タグが直接見つかりました:', directSelectedTags.length, '個');
    tagsList.length = 0; // 既存のリストをクリア
    
    directSelectedTags.forEach(tag => {
      // 削除ボタンを一時的に削除
      const closeButtons = tag.querySelectorAll('.btn-close, .close, .close-btn, button, a[role="button"]');
      const removedButtons = [];
      
      closeButtons.forEach(btn => {
        removedButtons.push({element: btn, parent: btn.parentNode});
        btn.remove();
      });
      
      // タグテキストを取得
      let tagText = tag.textContent.trim();
      
      // 削除ボタン（×）や特殊文字を含むテキストを処理
      tagText = tagText.replace(/[×x]\s*$/, '').trim();
      
      // 削除ボタンを元に戻す
      removedButtons.forEach(item => {
        if (item.parent) {
          item.parent.appendChild(item.element);
        }
      });
      
      // スキップすべきテキストかをチェック
      const skipText = ['×', 'x', '+', '削除', 'キャンセル', '5', '選択中のキーワード'];
      
      if (tagText && 
          !tagsList.includes(tagText) && 
          !skipText.includes(tagText) && 
          tagText.length < 20) { // 長すぎるテキストはスキップ
        tagsList.push(tagText);
      }
    });
  }
  
  // 上記で見つからなかった場合は、より広範囲に検索
  if (tagsList.length === 0) {
    // 画面に表示されている選択済みのタグ/キーワードを取得
    const selectedTags = document.querySelectorAll('.badge:not(.bg-light), .badge.bg-primary, .badge-primary, .selected-tag, .keyword-tag, .tag');
    if (selectedTags.length > 0) {
      console.log('バッジタグが見つかりました:', selectedTags.length, '個');
      // 表示されているタグを取得
      tagsList.length = 0; // 既存のリストをクリア
      
      selectedTags.forEach(tag => {
        // 削除ボタンのテキストは除外
        const closeButton = tag.querySelector('.btn-close, .close');
        if (closeButton) {
          closeButton.remove(); // 一時的に削除して取得
        }
        
        const tagText = tag.textContent.trim();
        if (tagText && !tagsList.includes(tagText) && tagText !== 'x' && tagText !== '×') {
          tagsList.push(tagText);
        }
        
        // 削除ボタンを戻す（元に戻すため）
        if (closeButton) {
          tag.appendChild(closeButton);
        }
      });
    } else {
      // ページ内の専門分野・興味のキーワードセクションから取得（選択済みのもののみ）
      const interestSection = document.querySelector('.interests-section, .keywords-section, .tags-section, #interest-section');
      if (interestSection) {
        console.log('興味セクションが見つかりました');
        // チェックされたチェックボックスとアクティブなタグのみを検索
        const selectedKeywords = interestSection.querySelectorAll('.badge.active, .tag.active, .keyword.active, .selected-keyword, .interest-item.active, input[type="checkbox"]:checked + label');
        console.log('選択済みキーワード要素数:', selectedKeywords.length);
        
        selectedKeywords.forEach(keyword => {
          const tagText = keyword.textContent.trim();
          // 削除ボタン（×）を含まないテキストのみを取得
          if (tagText && !tagText.includes('×') && !tagText.includes('x') && tagText !== '+' && !tagsList.includes(tagText)) {
            console.log('選択済みタグを追加:', tagText);
            tagsList.push(tagText);
          }
        });
      }
    }
    
    // カスタムタグからも取得（アクティブなものだけ）
    const customTags = document.querySelectorAll('.custom-tag.active, .tag-item.active, .custom-tag:not(.removed), .tag-item:not(.removed)');
    console.log('カスタムタグ要素数:', customTags.length);
    
    customTags.forEach(tag => {
      // テキストを抽出（削除ボタンのテキストは除外）
      const tagText = tag.childNodes[0]?.nodeValue?.trim() || tag.textContent.trim();
      if (tagText && !tagsList.includes(tagText) && tagText !== 'x' && tagText !== '×') {
        console.log('カスタムタグを追加:', tagText);
        tagsList.push(tagText);
      }
    });
  }
  
  console.log('表示するタグリスト:', tagsList);
  
  // タグコンテナをクリア
  tagsContainer.innerHTML = '';
  
  // タグがない場合は非表示、あれば表示
  if (tagsList.length === 0) {
    // タグコンテナを非表示
    console.log('選択されたタグがないため、何も表示しません');
    tagsContainer.style.display = 'none';
  } else {
    // タグコンテナを表示
    tagsContainer.style.display = 'block';
    
    // 実際のタグを表示（最大5つまで）
    const maxTags = 5;
    for (let i = 0; i < Math.min(tagsList.length, maxTags); i++) {
      const badge = document.createElement('span');
      badge.className = 'badge bg-primary me-1';
      badge.textContent = tagsList[i];
      tagsContainer.appendChild(badge);
    }
    
    // タグが多い場合は残りの数を表示
    if (tagsList.length > maxTags) {
      const moreBadge = document.createElement('span');
      moreBadge.className = 'badge bg-secondary';
      moreBadge.textContent = `+${tagsList.length - maxTags}`;
      tagsContainer.appendChild(moreBadge);
    }
  }
}

/**
 * 興味・専門分野のリスナーをセットアップ
 */
function setupInterestListeners() {
  console.log('興味・専門分野のリスナーをセットアップします...');
  
  // チェックボックスの変更を監視
  const checkboxes = document.querySelectorAll('.interest-checkbox, input[type="checkbox"][name^="interest"]');
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      console.log('チェックボックスが変更されました:', this.id);
      updatePreview();
    });
  });
  
  // カスタムタグ入力欄を監視
  const customTagInput = document.getElementById('interest-custom');
  if (customTagInput) {
    customTagInput.addEventListener('keypress', function(e) {
      // Enterキーでタグを追加
      if (e.key === 'Enter') {
        e.preventDefault();
        addCustomTag();
      }
    });
  }
  
  // タグ追加ボタンを監視
  const addTagButton = document.querySelector('.add-tag-btn, .add-custom-tag-btn');
  if (addTagButton) {
    addTagButton.addEventListener('click', function(e) {
      e.preventDefault();
      addCustomTag();
    });
  }
}

/**
 * カスタムタグを追加
 */
function addCustomTag() {
  const customTagInput = document.getElementById('interest-custom');
  if (!customTagInput || !customTagInput.value.trim()) return;
  
  console.log('カスタムタグを追加します:', customTagInput.value);
  
  // タグコンテナを探す
  const tagContainer = document.querySelector('.custom-tags-container, .tags-container');
  if (!tagContainer) return;
  
  // 新しいタグ要素を作成
  const newTag = document.createElement('span');
  newTag.className = 'badge bg-primary me-2 mb-2 custom-tag';
  newTag.textContent = customTagInput.value.trim();
  
  // 削除ボタンを追加
  const removeBtn = document.createElement('button');
  removeBtn.className = 'btn-close btn-close-white ms-1';
  removeBtn.setAttribute('type', 'button');
  removeBtn.setAttribute('aria-label', 'Remove');
  removeBtn.style.fontSize = '0.6em';
  removeBtn.addEventListener('click', function() {
    newTag.remove();
    updatePreview();
  });
  
  newTag.appendChild(removeBtn);
  tagContainer.appendChild(newTag);
  
  // 入力欄をクリア
  customTagInput.value = '';
  
  // プレビューを更新
  updatePreview();
}