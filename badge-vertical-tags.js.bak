/**
 * 狭いスペースに最適化したバッジ型縦置きタグ表示
 * プロフィールプレビューの下部に配置する専用デザイン
 * 左上のプロフィール写真下のタグは表示しない
 */
(function() {
  console.log('バッジ型縦置きタグを初期化します（プレビューのみ）');
  
  // スタイル追加
  const style = document.createElement('style');
  style.textContent = `
    /* バッジ型タグコンテナ */
    .badge-tags-container {
      display: flex;
      flex-direction: column;
      gap: 6px;
      margin: 8px 0;
      padding-top: 8px;
      border-top: 1px solid rgba(0,0,0,0.1);
      width: 100%;
      overflow: hidden;
    }
    
    /* タグラベル */
    .badge-tags-label {
      font-size: 12px;
      font-weight: 500;
      color: #555;
      margin-bottom: 2px;
    }
    
    /* バッジタグ */
    .badge-tag {
      display: inline-flex;
      align-items: center;
      padding: 4px 8px 4px 6px;
      border-radius: 15px;
      font-size: 11px;
      color: white;
      font-weight: 500;
      background-color: #6c757d;
      margin-bottom: 4px;
      width: fit-content;
      max-width: 100%;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    /* アイコン */
    .badge-tag-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      min-width: 18px;
      height: 18px;
      margin-right: 6px;
      border-radius: 50%;
      background-color: rgba(255,255,255,0.25);
      font-size: 10px;
      flex-shrink: 0;
    }
    
    /* カテゴリ別の色 */
    .badge-tag.tag-night {
      background-color: #3f51b5;
    }
    
    .badge-tag.tag-food, .badge-tag.tag-cooking {
      background-color: #e65100;
    }
    
    .badge-tag.tag-photo {
      background-color: #00838f;
    }
    
    .badge-tag.tag-activity {
      background-color: #2e7d32;
    }
    
    .badge-tag.tag-custom {
      background-color: #ff9800;
    }
    
    /* 左側のプロフィール写真下に表示されるタグを消す */
    .col-md-3 .badge-tags-container,
    .col-lg-3 .badge-tags-container,
    .col-xl-3 .badge-tags-container {
      display: none !important;
    }
    
    /* スマホ対応スタイル */
    @media (max-width: 768px) {
      .badge-tags-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 4px;
        margin-top: 12px;
      }
      
      .badge-tags-label {
        width: 100%;
        margin-bottom: 6px;
        font-size: 13px;
      }
      
      .badge-tag {
        padding: 3px 8px 3px 6px;
        font-size: 11px;
        margin-right: 4px;
      }
    }
  `;
  document.head.appendChild(style);
  
  // カテゴリアイコンマップ
  const CATEGORY_ICONS = {
    activity: 'bicycle',
    night: 'moon-stars-fill',
    food: 'cup-hot-fill',
    cooking: 'egg-fried',
    photo: 'camera-fill',
    custom: 'bookmark-fill',
    general: 'tag-fill'
  };
  
  // ページ読み込み後初期化
  window.addEventListener('load', function() {
    setTimeout(function() {
      // まず既存のタグを全て消去
      clearAllExistingTags();
      
      // プレビューにだけ表示
      initializeBadgeTags();
      
      // 変更監視
      setupTagChangeListeners();
      
      // 定期的に更新
      setInterval(updateBadgeTags, 2000);
    }, 1000);
  });
  
  // 既存のタグコンテナを全て消去
  function clearAllExistingTags() {
    // 既存のタグコンテナを削除
    const existingContainers = document.querySelectorAll('.side-badge-tags, .extreme-tag-container, .direct-tag-container');
    existingContainers.forEach(container => {
      container.remove();
    });
    
    // 左上のプロフィール画像の近くにあるタグ要素を削除
    const leftColumnElements = document.querySelectorAll('.col-md-3 .badge-tags-container, .col-lg-3 .badge-tags-container');
    leftColumnElements.forEach(element => {
      element.remove();
    });
  }
  
  // 初期化
  function initializeBadgeTags() {
    updateBadgeTags();
  }
  
  // タグ選択の変更を監視
  function setupTagChangeListeners() {
    document.addEventListener('click', function(e) {
      // タグ追加・削除に関連する要素のクリックを監視
      if (
        e.target.closest('.interests-preset-chip') || 
        e.target.closest('.selected-tag-preview') ||
        e.target.closest('.custom-chip-remove') ||
        e.target.closest('#add-custom-tag-btn')
      ) {
        // まず既存のタグを全て消去
        clearAllExistingTags();
        setTimeout(updateBadgeTags, 300);
      }
    });
    
    // カスタムタグの入力も監視
    const tagInput = document.getElementById('new-custom-tag');
    if (tagInput) {
      tagInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          // まず既存のタグを全て消去
          clearAllExistingTags();
          setTimeout(updateBadgeTags, 300);
        }
      });
    }
  }
  
  // バッジタグを更新
  function updateBadgeTags() {
    // 選択されたタグを取得
    const tags = getSelectedTags();
    
    // プロフィールプレビューのみを見つける
    const previewCard = findProfilePreviewCard();
    
    if (previewCard) {
      // すでにバッジタグコンテナがあれば取得
      let badgeContainer = previewCard.querySelector('.badge-tags-container');
      
      if (tags.length > 0) {
        // タグが選択されている場合のみ表示
        if (!badgeContainer) {
          badgeContainer = createBadgeContainer(previewCard);
        }
        
        // バッジを更新
        updateBadgesInContainer(badgeContainer, tags);
        
        // 表示を確保
        badgeContainer.style.display = 'block';
      } else {
        // タグが選択されていない場合は、コンテナがあれば非表示にする
        if (badgeContainer) {
          badgeContainer.style.display = 'none';
        }
      }
    }
  }
  
  // バッジコンテナを作成
  function createBadgeContainer(previewCard) {
    if (!previewCard) {
      console.error('プレビューカードが見つからないためタグコンテナを作成できません');
      return null;
    }
    
    try {
      const container = document.createElement('div');
      container.className = 'badge-tags-container';
      
      // タイトルラベル
      const label = document.createElement('div');
      label.className = 'badge-tags-label';
      label.textContent = '専門分野・キーワード';
      container.appendChild(label);
      
      // カードボディの最下部（プレビューの場合）
      const cardBody = previewCard.querySelector('.card-body');
      if (cardBody) {
        cardBody.appendChild(container);
        console.log('カードボディにタグコンテナを追加しました');
        return container;
      }
      
      // プレビューコンテナの場合
      if (previewCard.classList.contains('profile-preview-container')) {
        previewCard.appendChild(container);
        console.log('プレビューコンテナに直接タグコンテナを追加しました');
        return container;
      }
      
      // カード自体の最下部
      previewCard.appendChild(container);
      console.log('カード自体にタグコンテナを追加しました');
      return container;
    } catch (e) {
      console.error('タグコンテナ作成中にエラーが発生しました:', e);
      return null;
    }
  }
  
  // バッジを更新
  function updateBadgesInContainer(container, tags) {
    if (!container) {
      console.error('タグコンテナが見つからないためバッジを更新できません');
      return;
    }
    
    try {
      // タイトル以外のコンテンツをクリア
      const label = container.querySelector('.badge-tags-label');
      container.innerHTML = '';
      
      // ラベルを再追加
      if (label) {
        container.appendChild(label);
      } else {
        // ラベルがなければ新規作成
        const newLabel = document.createElement('div');
        newLabel.className = 'badge-tags-label';
        newLabel.textContent = '専門分野・キーワード';
        container.appendChild(newLabel);
      }
      
      // 各タグをバッジとして追加
      tags.forEach(tag => {
        if (!tag || !tag.label) return;
        
        const badge = document.createElement('div');
        badge.className = `badge-tag tag-${tag.category || 'general'}`;
        
        try {
          // アイコン
          const iconName = CATEGORY_ICONS[tag.category] || CATEGORY_ICONS.general;
          const icon = document.createElement('span');
          icon.className = 'badge-tag-icon';
          icon.innerHTML = `<i class="bi bi-${iconName}"></i>`;
          
          // テキスト
          const text = document.createElement('span');
          text.textContent = tag.label;
          
          badge.appendChild(icon);
          badge.appendChild(text);
          container.appendChild(badge);
        } catch (e) {
          console.error('タグバッジ作成中にエラーが発生しました:', e);
        }
      });
      
      // スマホ向けにコンテナを最適化
      optimizeContainerForMobile(container);
    } catch (e) {
      console.error('バッジ更新中にエラーが発生しました:', e);
    }
  }
  
  // スマホ向けに表示を最適化
  function optimizeContainerForMobile(container) {
    try {
      // スマホかどうかを判定
      const isMobile = window.innerWidth < 768;
      
      if (isMobile) {
        // スマホ向けのクラスを追加
        container.classList.add('mobile-badge-container');
        
        // スマホ向けに横スクロールを可能にする
        container.style.display = 'flex';
        container.style.flexWrap = 'wrap';
        container.style.gap = '0.35rem';
        
        // 子要素のスタイル最適化
        const badges = container.querySelectorAll('.badge-tag');
        badges.forEach(badge => {
          badge.style.fontSize = '0.8rem';
          badge.style.padding = '0.3rem 0.5rem';
          badge.style.margin = '0.15rem 0';
        });
      }
    } catch (e) {
      console.error('モバイル最適化中にエラーが発生しました:', e);
    }
  }
  
  // プロフィールプレビューカードを見つける（右側のプレビューのみ）
  function findProfilePreviewCard() {
    try {
      // まず最も確実に見つかるパターン - profile-preview-containerクラスを持つ要素
      const directPreviewContainer = document.querySelector('.profile-preview-container');
      if (directPreviewContainer) {
        console.log('プレビューコンテナを直接見つけました');
        return directPreviewContainer;
      }
    
      // プレビューヘッダーとカードを探す
      const previewHeaders = document.querySelectorAll('.card-header');
      for (const header of previewHeaders) {
        if (header && header.textContent && (header.textContent.includes('プレビュー') || header.textContent.includes('Preview'))) {
          const card = header.closest('.card');
          if (card) {
            console.log('プレビューヘッダーからカードを見つけました');
            return card;
          }
        }
      }
      
      // 青いヘッダーのプレビューカードを探す
      const blueHeaders = document.querySelectorAll('.card-header');
      for (const header of blueHeaders) {
        if (!header) continue;
        try {
          const style = window.getComputedStyle(header);
          if (
            (style.backgroundColor.includes('rgb(0, 123, 255)') || 
             style.backgroundColor.includes('rgb(13, 110, 253)')) &&
            (header.textContent && (header.textContent.includes('プロフィール') || 
                                    header.textContent.includes('Profile')))
          ) {
            const card = header.closest('.card');
            
            // スマホでは.col-md-12 col-lg-4クラスがあるか確認
            if (card) {
              console.log('青いヘッダーからカードを見つけました');
              return card;
            }
          }
        } catch (e) {
          console.error('ヘッダーのスタイル取得エラー:', e);
        }
      }
      
      // プロフィールらしいカードを探す（スマホ対応）
      const allCards = document.querySelectorAll('.card');
      for (const card of allCards) {
        if (!card) continue;
        
        // プロフィール写真を含むカードを探す
        const hasProfileImage = card.querySelector('img.rounded-circle') || 
                              card.querySelector('img.profile-image') || 
                              card.querySelector('.guide-preview-photo img');
                              
        if (hasProfileImage) {
          console.log('プロフィール写真からカードを見つけました');
          return card;
        }
        
        // ガイド名らしい要素を含むか
        const hasGuideName = card.querySelector('.guide-preview-name') || 
                           card.querySelector('.profile-name') ||
                           card.querySelector('.guide-name');
        
        if (hasGuideName) {
          console.log('ガイド名からカードを見つけました');
          return card;
        }
      }
      
      // 右側のカラムだけを探す（スマホではcol-md-12 col-lg-4になっている可能性がある）
      const rightColumns = document.querySelectorAll('.col-lg-4, .col-xl-4, .col-md-12.col-lg-4, .profile-preview');
      for (const col of rightColumns) {
        if (!col) continue;
        
        // 青いヘッダーのカードを探す
        const cards = col.querySelectorAll('.card');
        for (const card of cards) {
          if (card && card.querySelector('.card-header.bg-primary')) {
            console.log('右カラムの青ヘッダーカードを見つけました');
            return card;
          }
        }
        
        // なければ最初のカードを返す
        if (cards && cards.length > 0) {
          console.log('右カラムの最初のカードを見つけました');
          return cards[0];
        }
        
        // カードが見つからなければカラム自体を返す
        return col;
      }
    } catch (e) {
      console.error('プレビューカード検索中にエラーが発生しました:', e);
    }
    
    // それでも見つからない場合はプレビューっぽい要素を探す
    try {
      const fallbackElements = [
        document.querySelector('.profile-preview'),
        document.querySelector('.preview-card'),
        document.querySelector('[id*="preview"]'),
        document.querySelector('[class*="preview"]')
      ];
      
      for (const element of fallbackElements) {
        if (element) {
          console.log('フォールバック要素を見つけました');
          return element;
        }
      }
    } catch (e) {
      console.error('フォールバック検索中にエラーが発生しました:', e);
    }
    
    console.warn('プレビューカードが見つかりませんでした');
    return null;
  }
  
  // 選択されたタグを取得
  function getSelectedTags() {
    const tags = [];
    
    // 新UIで選択中のタグを取得
    const selectedContainer = document.getElementById('selected-tags-preview');
    if (selectedContainer) {
      const selectedTags = selectedContainer.querySelectorAll('.selected-tag-preview:not(.removing)');
      
      selectedTags.forEach(tag => {
        const value = tag.dataset.value || '';
        const label = tag.querySelector('.selected-tag-text')?.textContent || '';
        
        if (label) {
          // カテゴリの特定
          let category = 'general';
          
          if (value.startsWith('custom:')) {
            category = 'custom';
          } else if (value) {
            category = value;
          }
          
          tags.push({
            value: value,
            label: label,
            category: category
          });
        }
      });
    }
    
    // 従来のチェックボックスからのフォールバック
    if (tags.length === 0) {
      const checkboxes = document.querySelectorAll('input[type="checkbox"][id^="interest-"]:checked');
      
      checkboxes.forEach(checkbox => {
        const value = checkbox.id.replace('interest-', '');
        const label = checkbox.nextElementSibling?.textContent?.trim() || value;
        
        tags.push({
          value: value,
          label: label,
          category: value
        });
      });
    }
    
    console.log('[badge-vertical-tags] 選択されているタグ:', tags.length > 0 ? tags.map(t => t.label) : 'なし');
    
    return tags;
  }
})();